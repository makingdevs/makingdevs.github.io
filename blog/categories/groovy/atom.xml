<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | Blog de MakingDevs]]></title>
  <link href="http://makingdevs.github.io/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://makingdevs.github.io/"/>
  <updated>2015-05-02T16:15:17-05:00</updated>
  <id>http://makingdevs.github.io/</id>
  <author>
    <name><![CDATA[MakingDevs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Inyección De Métodos Por Categorías Y TimeCategory]]></title>
    <link href="http://makingdevs.github.io/2014/09/16/inyeccion-de-metodos-por-categorias-y-timecategory/"/>
    <updated>2014-09-16T18:55:30-05:00</updated>
    <id>http://makingdevs.github.io/2014/09/16/inyeccion-de-metodos-por-categorias-y-timecategory</id>
    <content type="html"><![CDATA[<h2>Acerca de las categorías</h2>

<p>En Groovy se pueden inyectar métodos de algunas formas, uno de ellos es a través del uso de categorías, la cual nos da inyección temporal y controlada de dichos elementos. Para hacerlo las clases que son categorías deben de cumplir con cierta estructura:</p>

<ul>
<li>Los métodos de la clase deben ser definidos como estáticos</li>
<li>El primer argumento de dicho método define el tipo sobre el cual se inyectarían los nuevos métodos</li>
<li>Deben de ser usados dentro del alcance de un closure con ayuda de la palabra reservada <code>use</code></li>
</ul>


<!-- more -->


<p>Un ejemplo podría ser el siguiente:</p>

<pre><code class="groovy">    class NameUtil{
        static prettify(String name){
            name.trim().split(' ').grep { it.size() }*.capitalize().join(' ')
        }
    }

    use NameUtil, {
        println "  josé   juan    reyes    zuñiga   ".prettify()
    }
</code></pre>

<p>Adicionalmente, podemos crear dicha inyección de métodos con ayuda de la anotación <code>@Category</code>, que prácticamente nos facilita a que cualquier clase pueda ser usada como categoría, pues no necesariamente los métodos tiene que ser estáticos y el contexto del argumento para la inyección es el objeto <code>this</code> en donde se esté intentando usar.</p>

<h2>Uso de GroovyTime</h2>

<p>La clase <code>TimeCategory</code> es una clase que tiene una serie de métodos de conveniencia para el manejo del tiempo, formando así un DSL, con el que podemos operar. Y con ayuda de la clase <code>Duration</code> complementamos algunas operaciones que se pueden realizar en el contexto de los objetos que estemos usando.</p>

<pre><code class="groovy">    import groovy.time.TimeCategory

    use ( TimeCategory ) {
        println 2.hours.ago
        println 30.minutes.from // TimeDuration
        println 30.minutes.from.now
        println 40.minutes + 30.minutes.from.now
        println 30.minutes.ago

        def today = new Date()
        println today - 3.years
        println today + 4.weeks
        println today + 90.minutes
    }
</code></pre>

<p>Para que consideres el conjunto de operaciones que tienes disponibles te recomendamos visitar la documentación de <a href="http://groovy.codehaus.org/api/groovy/time/TimeCategory.html">TimeCategory</a> y <a href="http://groovy.codehaus.org/api/groovy/time/Duration.html">Duration</a></p>
]]></content>
  </entry>
  
</feed>
