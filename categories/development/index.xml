<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on Blog de Making Devs</title>
    <link>http://blog.makingdevs.com/categories/development/</link>
    <description>Recent content in development on Blog de Making Devs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Sep 2016 11:22:01 -0500</lastBuildDate>
    
	<atom:link href="http://blog.makingdevs.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Routing en Elm</title>
      <link>http://blog.makingdevs.com/2016/09/10/routing-en-elm/</link>
      <pubDate>Sat, 10 Sep 2016 11:22:01 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/09/10/routing-en-elm/</guid>
      <description>La URL es un bit interesante de nuestra applicación, nos permite regresar a un estado, o compartir ese estado con alguien más; y en Elm, el Routing, es la segunda cosa más importante que deberías conocer después del propio lenguaje. Así que empecemos.
ANATOMÍA DE UNA URL Una URL es una dirección dada para un recurso único en la web y está compuesta de diferentes partes: un protocolo, un host, un nombre de dominio, opcionalmente un path y el nombre del archivo:</description>
    </item>
    
    <item>
      <title>Borrado batch en Grails</title>
      <link>http://blog.makingdevs.com/2015/05/01/borrado-batch-en-grails/</link>
      <pubDate>Fri, 01 May 2015 20:58:30 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2015/05/01/borrado-batch-en-grails/</guid>
      <description>En esta ocasión les quiero compartir la solución a un problema que tuve al borrar una colección de objetos en grails y con el GORM, si bien podría hacerlo con HQL o con SQL usando las bondades de Hibernate me gusto más el acercamiento que les quiero presentar.
La necesidad era borrar un grupo de objetos en donde el contenido de su relación estuviera vacío, ejemplifico con la estructura de unas clases:</description>
    </item>
    
    <item>
      <title>Clusterizacion con Camel</title>
      <link>http://blog.makingdevs.com/2015/04/07/clusterizacion-con-camel/</link>
      <pubDate>Tue, 07 Apr 2015 19:56:54 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2015/04/07/clusterizacion-con-camel/</guid>
      <description>Camel ofrece distintas soluciones para ser escalado o para distribuir la carga en diferentes instancias, la soluciones que ofrece dependerá de como se encuentra nuestra infraestructura ( y configuración).
 Misma JVM y CamelContext Misma JVM pero diferente CamelContext Diferente JVM y CamelContext   El problema que me vi envuelto fue de estas tres, la ultima, el clusterizar camel que se encontraban en diferentes JVM y CamelContext. Y en particular tuve un problema de mensajes duplicados.</description>
    </item>
    
    <item>
      <title>Personalizar notificaciones de correo en Jenkins</title>
      <link>http://blog.makingdevs.com/2014/11/06/personalizar-notificaciones-de-correo-en-jenkins/</link>
      <pubDate>Thu, 06 Nov 2014 19:08:56 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2014/11/06/personalizar-notificaciones-de-correo-en-jenkins/</guid>
      <description>Las notificaciones son básicas para la correcta comunicación de los involucrados de nuestros proyectos como: Stakeholders/ Key Users / Developers / Clientes / Testers.
Por esta razón te recomiendo personalizar las notificaciones por defecto de Jenkins.
Objetivo: Informar los despliegues desde Jenkins por correo, usando el plugin: Email-ext
Procedimiento:
 Instalar el plugin desde la consola de administración de Jenkins.  Configurar la cuenta de correo saliente SMTP, te recomiendo que uses el autenticado.</description>
    </item>
    
    <item>
      <title>Inyección de métodos por categorías y TimeCategory</title>
      <link>http://blog.makingdevs.com/2014/09/16/inyecci%C3%B3n-de-m%C3%A9todos-por-categor%C3%ADas-y-timecategory/</link>
      <pubDate>Tue, 16 Sep 2014 18:55:30 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2014/09/16/inyecci%C3%B3n-de-m%C3%A9todos-por-categor%C3%ADas-y-timecategory/</guid>
      <description>Acerca de las categorías En Groovy se pueden inyectar métodos de algunas formas, uno de ellos es a través del uso de categorías, la cual nos da inyección temporal y controlada de dichos elementos. Para hacerlo las clases que son categorías deben de cumplir con cierta estructura:
 Los métodos de la clase deben ser definidos como estáticos El primer argumento de dicho método define el tipo sobre el cual se inyectarían los nuevos métodos Deben de ser usados dentro del alcance de un closure con ayuda de la palabra reservada use   Un ejemplo podría ser el siguiente:</description>
    </item>
    
    <item>
      <title>Lectura de correo con Apache Camel y Groovy</title>
      <link>http://blog.makingdevs.com/2014/08/26/lectura-de-correo-con-apache-camel-y-groovy/</link>
      <pubDate>Tue, 26 Aug 2014 18:29:26 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2014/08/26/lectura-de-correo-con-apache-camel-y-groovy/</guid>
      <description>Hola a todos es un gusto contribuir al blog de makingdevs.com y mostrarles un poco de lo que es Apache Camel, para ellos hablaremos primero de su definición.
Apache Camel es un framework de integración de código abierto, basado en Enterprise Integration Patterns (Patrones de Integración Empresarial). Camel nos permite definir las reglas de enrutamiento o mediación con ayuda de un lenguaje especifico (DSL), incluyendo un API basada en Java o mediante una configuración XML.</description>
    </item>
    
  </channel>
</rss>