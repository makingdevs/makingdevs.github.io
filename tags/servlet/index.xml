<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Servlet on Blog de Making Devs</title>
    <link>http://blog.makingdevs.com/tags/servlet/</link>
    <description>Recent content in Servlet on Blog de Making Devs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Mar 2016 21:38:08 -0600</lastBuildDate>
    <atom:link href="http://blog.makingdevs.com/tags/servlet/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MicroServicios con Groovy</title>
      <link>http://blog.makingdevs.com/2016/03/08/microservicios-con-groovy</link>
      <pubDate>Tue, 08 Mar 2016 21:38:08 -0600</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/03/08/microservicios-con-groovy</guid>
      <description>&lt;p&gt;Si bien, existen muchas tecnologías muy completas que permiten la creación de servicios robustos, a veces me he visto en la necesidad de hacer algo pequeño. muy concreto pero mantenible, y que pueda soportar un volumen determinado. Es por esto que me he apoyado del poder que ofrece Groovy con ayuda de los &lt;a href=&#34;http://docs.groovy-lang.org/latest/html/api/groovy/servlet/GroovyServlet.html&#34;&gt;Groovlets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La parte que me gusta de este acercamiento es que el poder del Scripting se pasa al navegador, o en este caso, a un cliente que consume algún servicio web. Cuando usamos &lt;em&gt;Groovlets&lt;/em&gt; tenemos disponible lo sisguiente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;request&lt;/em&gt; - &lt;code&gt;HttpServletRequest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;response&lt;/em&gt; - &lt;code&gt;HttpServletResponse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;application&lt;/em&gt; - &lt;code&gt;ServletContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;session&lt;/em&gt; - &lt;code&gt;HttpSession&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;out&lt;/em&gt; - &lt;code&gt;PrintWriter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;headers&lt;/em&gt; - &lt;code&gt;Header[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;params&lt;/em&gt; - Un objeto tipo &lt;code&gt;Map&lt;/code&gt; que contiene los parámetros&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;p&gt;Ahora bien, que la configuración XML si es el caso es muy sencilla y sólo tenemos que agregar el Servlet de Groovy y hacer el mapeo.&lt;/p&gt;


&lt;servlet&gt;
  &lt;servlet-name&gt;Groovy&lt;/servlet-name&gt;
  &lt;servlet-class&gt;groovy.servlet.GroovyServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
  &lt;servlet-name&gt;Groovy&lt;/servlet-name&gt;
  &lt;url-pattern&gt;*.groovy&lt;/url-pattern&gt;
  &lt;url-pattern&gt;*.gdo&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;


&lt;p&gt;&lt;em&gt;Nota: Que el mapeo no necesariamente es estricto con la extensión, podemos usar la que querramos.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Y aunque la implementación que muestro no sería la más &lt;em&gt;adecuada&lt;/em&gt;, sirve de ejemplo para mostrar en pocas líneas la mayoría de los elementos antes mencionado:&lt;/p&gt;

&lt;p&gt;Me apoyo de un par de clases que &lt;em&gt;modelan&lt;/em&gt; un almacén de datos.&lt;/p&gt;

todos.groovy
class Todo {
  String description
}

@Singleton // Only one instance
class TodoManager {
  List&lt;Todo&gt; todos = []
}


&lt;p&gt;Podemos jugar con el reponse directamente para decirle que cualquier respuesta sería JSON:&lt;/p&gt;

&lt;p&gt;
todos.groovy
response.contentType = &#39;application/json&#39;

Buscar algún encabezado en particular para validar nuestra solicitud:&lt;/p&gt;


todos.groovy
def contentType = headers.find { k,v -&gt; k.toLowerCase() == &#39;content-type&#39; }?.value

if(contentType != &#34;application/json&#34;){
  response.status = HttpServletResponse.SC_BAD_REQUEST // We return a status code 400
  // Using the json method included
  json(status:&#34;Please use &#39;application/json&#39; header, just received ${headers} instead&#34;)
  return // And nothing more...
}


&lt;p&gt;A partir de aquí podemos jugar con el método de envío y hacer algunas acciones, aquí una muestra muy simple:&lt;/p&gt;

&lt;p&gt;
todos.groovy
switch(request.method.toLowerCase()){ // Validating the method
  case &#39;get&#39;:
    json(todos:TodoManager.instance.todos) // Using the instance
  break
  case &#39;post&#39;:
    Todo todo = new Todo(description:params?.todo ?: &#34;No description&#34;)
    TodoManager.instance.todos &lt;&lt; todo
    response.status = HttpServletResponse.SC_CREATED
    json(todo:todo)
  break
  default:
    response.status = HttpServletResponse.SC_BAD_REQUEST
    json(status:&#34;Method &#39;${request.method.toLowerCase()}&#39; not supported&#34;)
}
&lt;/p&gt;

&lt;p&gt;Puedes incluir estos tres últimos fragmentos en un archivo y todo funcionará sin problemas. Aunque, nuevamente no es la forma más adecuada, muestra muy bien el potencial del simple uso del Groovlet.&lt;/p&gt;

&lt;p&gt;Al final podrías usar &lt;code&gt;@Grab&lt;/code&gt; para obtener las dependencias de &lt;em&gt;Jetty&lt;/em&gt; y levantar el contenedor en el mismo archivo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusión&lt;/strong&gt;: En un par de líneas puedes conseguir un servicio pequeño, entendible y listo para pasarse a un proyecto de Gradle que permita estructurarlo mejor para irle creciendo.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>