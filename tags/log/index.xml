<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log on Blog de Making Devs</title>
    <link>http://blog.makingdevs.com/tags/log/</link>
    <description>Recent content in Log on Blog de Making Devs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Mar 2016 09:13:56 -0600</lastBuildDate>
    <atom:link href="http://blog.makingdevs.com/tags/log/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Uso de logback</title>
      <link>http://blog.makingdevs.com/2016/03/28/uso-de-logback</link>
      <pubDate>Mon, 28 Mar 2016 09:13:56 -0600</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/03/28/uso-de-logback</guid>
      <description>

&lt;p&gt;En el proceso de desarrollo de software se implementan bitácoras o mejor conocidas como &lt;em&gt;loggers&lt;/em&gt; que permiten tener información de salida útil al desarrollador en cuanto al correcto flujo de la aplicación.&lt;/p&gt;

&lt;p&gt;Este registro se divide en secciones: Logger, Formatter y Handler.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Logger&lt;/em&gt;: Es el responsable de captar el mensaje y pasarlo al marco de registro.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Formatter&lt;/em&gt;: Su función es dar formato a la salida. toma el objeto binario y realiza la conversión a una representación de cadena&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Appender&lt;/em&gt; o &lt;em&gt;Handler&lt;/em&gt;: Se le entrega el mensaje con formato al Appender, el cual puede ser visualizado en diferentes formas como son: consola, archivo, base de datos, servicios de mensajería, escribir en un socket.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existen ciertos niveles de logger para diferenciar el tipo de salida que queremos generar:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Nivel&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Descripción&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FATAL&lt;/td&gt;
&lt;td&gt;Errores graves que causan la terminación prematura&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;Otros errores de ejecución o condiciones inesperadas&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WARNING&lt;/td&gt;
&lt;td&gt;Se utiliza para situaciones que podrían ser potencialmente dañinas&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;INFO&lt;/td&gt;
&lt;td&gt;Eventos interesantes de tiempo de ejecución (inicio / apagado)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DEBUG&lt;/td&gt;
&lt;td&gt;Información detallada sobre el flujo a través del sistema&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TRACE&lt;/td&gt;
&lt;td&gt;Información más detallada&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#Logback
Este logger pretende ser el sucesor de log4j, fue diseñado por Ceki Gülcü, fundador de log4j&amp;rsquo;s.
Para poder usar este logger, se requiere del módulo logback.
Una configuración del archivo gradle queda de la siguiente manera:&lt;/p&gt;


apply plugin:&#39;groovy&#39;

repositories{
  jcenter()
}

dependencies{
  compile &#39;org.codehaus.groovy:groovy-all:2.4.4&#39;
  compile &#39;ch.qos.logback:logback-classic:1.1.6&#39;
}


&lt;p&gt;El archivo groovy que se estará manejando para obtener la bitácora será &lt;em&gt;logback.groovy&lt;/em&gt; el cual contiene el patrón de salida del logger además de especificar donde se mostrara dicha información.&lt;/p&gt;


import static ch.qos.logback.classic.Level.INFO
import static ch.qos.logback.classic.Level.DEBUG

import ch.qos.logback.classic.encoder.PatternLayoutEncoder
import ch.qos.logback.core.ConsoleAppender

appender(&#34;CONSOLE&#34;, ConsoleAppender) {
  encoder(PatternLayoutEncoder) {
    pattern = &#34;%d{HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{15}) - %msg %n&#34;
  }
}

appender(&#34;FILE&#34;, FileAppender) {
  file = &#34;example_logger.log&#34;
  append = true
  encoder(PatternLayoutEncoder) {
    pattern = &#34;%d{HH:mm:ss.SSS} %-5level %logger{30} %msg %n&#34;
  }
}
root(DEBUG, [&#34;CONSOLE&#34;,&#34;FILE&#34;])


&lt;p&gt;Ahora el archivo se crea una instancia de la clase Logger. Además de contar con el nivel del logger, respetando la configuración que se hizo en el archivo logback.groovy.&lt;/p&gt;


import org.slf4j.Logger
import org.slf4j.LoggerFactory

Logger log = LoggerFactory.getLogger(getClass())

log.debug &#34;*&#34;*40
log.debug request.properties.toString()
log.error &#34;Error&#34;
log.warn &#34;Warning&#34;
log.info &#34;Info&#34;
log.trace &#34;Trace&#34;


&lt;p&gt;Un ejemplo de como se vería:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.makingdevs.com/images/logback.png&#34; alt=&#34;logback&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;acerca-del-patrón-de-salida:7021a7174aa75b3834b28f510b3c4306&#34;&gt;Acerca del patrón de salida&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%d{HH:mm:ss.SSS}&lt;/code&gt; Es la hora que se realizo el proceso&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[%thread]&lt;/code&gt; Indica el thread que inicio la tarea&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%highlight(%-5level)&lt;/code&gt; Brinda el color acorde al nivel de logger que se esta usando&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%cyan(%logger{15})&lt;/code&gt; Muestra el nombre de la clase que esta tomando el logger, en color azul&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%msg&lt;/code&gt; Muestra el msn que se manda acorde al nivel que se esta llamando&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%n&lt;/code&gt; Indica el final de la línea&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pueden encontrar el código de ejemplo &lt;a href=&#34;https://github.com/reyes271292/logger_logback&#34;&gt;&lt;em&gt;aquí&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>