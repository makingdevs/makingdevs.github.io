<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog de Making Devs</title>
    <link>http://blog.makingdevs.com/tags/elixir/index.xml</link>
    <description>Recent content on Blog de Making Devs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.makingdevs.com/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Resolviendo la criba de Eratóstenes con Elixir</title>
      <link>http://blog.makingdevs.com/2017/01/11/resolviendo-la-criba-de-erat%C3%B3stenes-con-elixir</link>
      <pubDate>Wed, 11 Jan 2017 13:11:46 -0600</pubDate>
      
      <guid>http://blog.makingdevs.com/2017/01/11/resolviendo-la-criba-de-erat%C3%B3stenes-con-elixir</guid>
      <description>&lt;p&gt;Ya una vez más familiarizado con Elixir me dí a la tarea de resolver un problema que se encuentra documentado en la Wikipedia, la forma de obtener un conjunto de números primos y una solución es a través de la llamada (Criba de Eratótstenes)&lt;a href=&#34;https://es.wikipedia.org/wiki/Criba_de_Eratóstenes&#34;&gt;1&lt;/a&gt; descrita así:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primer paso: listar los números naturales comprendidos entre 2 y n.&lt;/li&gt;
&lt;li&gt;Segundo paso: Se toma el primer número no rayado ni marcado, como número primo.&lt;/li&gt;
&lt;li&gt;Tercer paso: Se tachan todos los múltiplos del número que se acaba de indicar como primo.&lt;/li&gt;
&lt;li&gt;Cuarto paso: Si el cuadrado del primer número que no ha sido rayado ni marcado es inferior a n, entonces se repite el segundo paso. Si no, el algoritmo termina, y todos los enteros no tachados son declarados primos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif&#34; alt=&#34;sieve&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez definido el problema pude interpretar los pasos descritos en funciones de elixir, resultándome en algo como lo siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/neodevelop/aaf941b6bc809fb0074f9b17dc0eef22.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Al final, la forma en como quedó definido fue apegado al conjunto de pasos que permitían filtrar los casos en donde el número en cuestión era primo, y es aquí en donde las expresión de las funciones me ayudó.&lt;/p&gt;

&lt;p&gt;En resumen, considero que Elixir me ayuda mucho a poder aterrizar elementos o descripciones matemáticas en funciones específicas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FizzBuzz</title>
      <link>http://blog.makingdevs.com/2016/11/05/fizzbuzz</link>
      <pubDate>Sat, 05 Nov 2016 19:35:08 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/11/05/fizzbuzz</guid>
      <description>&lt;p&gt;Before we pass to how we can make a &lt;em&gt;FizzBuzz&lt;/em&gt; game, we need to know something more basic about &lt;code&gt;Elixir&lt;/code&gt;. Today we are going to learn something called &lt;em&gt;Anonymous Function&lt;/em&gt; (a.k.a Lambda Expression)&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;Anonymous Function&lt;/em&gt; is a function without a name and is usually used for applying some sort of transformation to the arguments passed.&lt;/p&gt;

&lt;p&gt;According to &lt;em&gt;Wikipedia&lt;/em&gt; an &lt;em&gt;Anonymous Function&lt;/em&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A function definition that is not bound to an identifier. &lt;a href=&#34;https://en.wikipedia.org/wiki/Anonymous_function&#34;&gt;Anonymous functions&lt;/a&gt; are often&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arguments being passed to higher-order functions, or&lt;/li&gt;
&lt;li&gt;Used for constructing the result of a higher-order function that needs to return a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, in &lt;code&gt;elixir&lt;/code&gt; the way that we can create an &lt;em&gt;Anonymous Function&lt;/em&gt; is with the &lt;code&gt;fn&lt;/code&gt; keyword:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt;
  argument &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; body
  argument &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; body
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An easy example of an &lt;em&gt;Anonymous Function&lt;/em&gt; is a multiplication of a number by 5.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;iex(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; times_5 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt;(a) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Function&amp;lt;6.52032458/1 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; times_5&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The line (&lt;code&gt;times_5 = fn(a) -&amp;gt; a * 5 end&lt;/code&gt;) creates a function that takes one parameter and the implementation of the function is after the &lt;code&gt;-&amp;gt;&lt;/code&gt; and is terminated by the &lt;code&gt;end&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;And the other line is the execution of the function using a dot &lt;code&gt;.&lt;/code&gt; between the variable(let&amp;rsquo;s call it that way) and the parenthesis.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep in mind a variable assigned inside a function does not affect its surrounding environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So given this explanation we can make a little game called &lt;code&gt;FizzBuzz&lt;/code&gt;. If you never heard about it this is a brief description:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any number divisible by three is replaced by the word Fizz&lt;/li&gt;
&lt;li&gt;Any number divisible by five is replaced by  the word Buzz.&lt;/li&gt;
&lt;li&gt;Any number divisible by both become FizzBuzz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With our example we are going to make use of the &lt;em&gt;Anonymous Functions&lt;/em&gt; that we already explain above.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;iex(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; fizz_buzz &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt;, c &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; c
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Function&amp;lt;18.52032458/3 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; number_to_eval &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   n &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; fizz_buzz&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;(rem(n, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;), rem(n, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;), n)
...(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Function&amp;lt;6.52032458/1 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1..16&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;to_list &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;map(number_to_eval)
[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;14&lt;/span&gt;,
 &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;number_to_eval&lt;/code&gt; is an &lt;em&gt;Anonymous Function&lt;/em&gt; that wrap the implementation of another &lt;em&gt;Anonymous Function&lt;/em&gt; &lt;code&gt;fizz_buzz&lt;/code&gt;. &lt;code&gt;number_to_eval&lt;/code&gt; is going to take one argument and pass the remnant of that number divided by &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; and the number itself to the &lt;code&gt;fizz_buzz&lt;/code&gt; function. In the &lt;code&gt;fizz_buzz&lt;/code&gt; function we are going to make use of the patter match.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the remnant by &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;is &lt;code&gt;0&lt;/code&gt; we are going to return &lt;code&gt;FizzBuzz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the remnant by &lt;code&gt;3&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; we are going to return &lt;code&gt;Fizz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the remnant by &lt;code&gt;5&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; we are going to return &lt;code&gt;Buzz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If doesn&amp;rsquo;t match to any of above we are going to return the same number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And in the next lines we are going to eval sixteen numbers.&lt;/p&gt;

&lt;p&gt;In this example we can make a good use for &lt;em&gt;Anonymous Functions&lt;/em&gt; and how we can apply on a &lt;code&gt;Enum.map&lt;/code&gt; module. This is brief and of course you can make a good use of it in another situations but is a little beyond the scope of this post.&lt;/p&gt;

&lt;p&gt;So I hope you enjoy this can help you to make something else and for me that&amp;rsquo;s all. Good Luck, Have Fun and GG!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ecto Transactions</title>
      <link>http://blog.makingdevs.com/2016/09/20/ecto-transactions</link>
      <pubDate>Tue, 20 Sep 2016 19:35:08 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/09/20/ecto-transactions</guid>
      <description>&lt;p&gt;It has been a couple of months since I wrote something and was about &lt;code&gt;phoenix&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt;. Today I&amp;rsquo;m going to talk about &lt;code&gt;elixir&lt;/code&gt;, &lt;code&gt;ecto&lt;/code&gt; and how to manage &lt;code&gt;transactions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Well in this post we are going to skip &lt;code&gt;ecto setup&lt;/code&gt; (if for some way, it was need it, please leave a comment and I will make a post for it, but I think his &lt;a href=&#34;https://github.com/elixir-ecto/ecto&#34;&gt;documentation&lt;/a&gt; makes a fairly good example for it)&lt;/p&gt;

&lt;p&gt;With that in mind, these are the tables that we are going to use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Project table
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Project&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto.Schema&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto.Changeset&lt;/span&gt;

  schema &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;projects&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    field &lt;span style=&#34;color: #B8860B&#34;&gt;:name&lt;/span&gt;
    has_many &lt;span style=&#34;color: #B8860B&#34;&gt;:tasks&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Task&lt;/span&gt;

    timestamps
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;def&lt;/span&gt; changeset(struct, params \\ %{}) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    struct
    &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; cast(params, [&lt;span style=&#34;color: #B8860B&#34;&gt;:name&lt;/span&gt;])
    &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; validate_required([&lt;span style=&#34;color: #B8860B&#34;&gt;:name&lt;/span&gt;])
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Task table
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Task&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto.Schema&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto.Changeset&lt;/span&gt;

  schema &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    field &lt;span style=&#34;color: #B8860B&#34;&gt;:description&lt;/span&gt;
    belongs_to &lt;span style=&#34;color: #B8860B&#34;&gt;:project&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Project&lt;/span&gt;

    timestamps
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;def&lt;/span&gt; changeset(struct, params \\ %{}) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    struct
    &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; cast(params, [&lt;span style=&#34;color: #B8860B&#34;&gt;:description&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:project_id&lt;/span&gt;])
    &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; validate_required([&lt;span style=&#34;color: #B8860B&#34;&gt;:description&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:project_id&lt;/span&gt;])
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With both tables we can see that &lt;code&gt;Task&lt;/code&gt; depends from &lt;code&gt;Project&lt;/code&gt;. So we are going to create a &lt;code&gt;project&lt;/code&gt; with a &lt;code&gt;task&lt;/code&gt; and we are going to see how can we handle a creation like that.&lt;/p&gt;

&lt;p&gt;The first thing we should know is, how can we create a transaction? With this instruction &lt;code&gt;Repo.transaction(fn -&amp;gt; end)&lt;/code&gt; Between &lt;code&gt;arrow&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; we put the code that we need. And for making a &lt;code&gt;rollback&lt;/code&gt; we use &lt;code&gt;Repo.rollback(value)&lt;/code&gt; and between parenthesis we can indicate the reason of why we are making that decision.&lt;/p&gt;

&lt;p&gt;So we are going to create a module for handling this&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.App&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Repo&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Project&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Task&lt;/span&gt;

    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# creating project and task&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;def&lt;/span&gt; create_project_with_task(project_params, task_params) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;transaction(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;
        project_params
        &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; create_project_with_params
        &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; add_task_to_project(task_params)
      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;)
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# creating project&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defp&lt;/span&gt; create_project_with_params(project_params) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      %&lt;span style=&#34;color: #0000FF&#34;&gt;Project&lt;/span&gt;{}
      &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Project&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;changeset(project_params)
      &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;insert
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# adding a task to a valid project&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defp&lt;/span&gt; add_task_to_project({&lt;span style=&#34;color: #B8860B&#34;&gt;:ok&lt;/span&gt;, project}, task_params) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      changeset &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; project
                  &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; build_assoc(&lt;span style=&#34;color: #B8860B&#34;&gt;:tasks&lt;/span&gt;)
                  &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;changeset(task_params)

      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;insert(changeset) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
        {&lt;span style=&#34;color: #B8860B&#34;&gt;:ok&lt;/span&gt;, _task} &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; project
        {&lt;span style=&#34;color: #B8860B&#34;&gt;:error&lt;/span&gt;, changeset} &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;rollback(&lt;span style=&#34;color: #B8860B&#34;&gt;:task&lt;/span&gt;) &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# Rollback transaction for invalid task data&lt;/span&gt;
      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defp&lt;/span&gt; add_task_to_project({&lt;span style=&#34;color: #B8860B&#34;&gt;:error&lt;/span&gt;, _changeset}, _task_params),
    &lt;span style=&#34;color: #B8860B&#34;&gt;do&lt;/span&gt;: &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;rollback(&lt;span style=&#34;color: #B8860B&#34;&gt;:project&lt;/span&gt;) &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# Rollback transaction for invalid project data&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if we use &lt;code&gt;iex -S mix&lt;/code&gt; and passing some args to this we can obtain the following results&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Passing good options
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;iex(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; project_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Should create task for example&amp;quot;&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Should create task for example&amp;quot;&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.App&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;create_project_with_task(project_params, task_params)

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;59.905&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.2&lt;/span&gt;ms queue&lt;span style=&#34;color: #666666&#34;&gt;=0.1&lt;/span&gt;ms
begin []

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;59.917&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.9&lt;/span&gt;ms
&lt;span style=&#34;color: #0000FF&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;projects&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;inserted_at&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;RETURNING&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}]

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;59.921&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=3.1&lt;/span&gt;ms
&lt;span style=&#34;color: #0000FF&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;project_id&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;inserted_at&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;RETURNING&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Should create task for example&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}]

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;59.922&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.3&lt;/span&gt;ms
commit []
{&lt;span style=&#34;color: #B8860B&#34;&gt;:ok&lt;/span&gt;,
 %&lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Project&lt;/span&gt;{&lt;span style=&#34;color: #B8860B&#34;&gt;__meta__&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.Schema.Metadata&amp;lt;:loaded, &amp;quot;projects&amp;quot;&amp;gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #B8860B&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;inserted_at&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.DateTime&amp;lt;2016-09-21 03:28:59&amp;gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #B8860B&#34;&gt;tasks&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.Association.NotLoaded&amp;lt;association :tasks is not loaded&amp;gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #B8860B&#34;&gt;updated_at&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.DateTime&amp;lt;2016-09-21 03:28:59&amp;gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;ecto_simple&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;from&lt;/span&gt; projects; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;from&lt;/span&gt; tasks;
&lt;span style=&#34;color: #888888&#34;&gt;+------+---------------------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|   id | name                      | inserted_at         | updated_at          |&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|------+---------------------------+---------------------+---------------------|&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|    1 | Explain ecto transactions | 2016-09-21 03:28:59 | 2016-09-21 03:28:59 |&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;+------+---------------------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;SELECT 1&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;+------+--------------------------------+--------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|   id | description                    |   project_id | inserted_at         | updated_at          |&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|------+--------------------------------+--------------+---------------------+---------------------|&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|    1 | Should create task for example |            1 | 2016-09-21 03:28:59 | 2016-09-21 03:28:59 |&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;+------+--------------------------------+--------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;SELECT 1&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;Time: 0.003s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And for bad data we can obtain next results:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;iex(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; project_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color: #880000&#34;&gt;nil&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color: #880000&#34;&gt;nil&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.App&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;create_project_with_task(project_params, task_params)

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;25.863&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.2&lt;/span&gt;ms
begin []

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;25.865&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.2&lt;/span&gt;ms
rollback []
{&lt;span style=&#34;color: #B8860B&#34;&gt;:error&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:project&lt;/span&gt;}

iex(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; project_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.App&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;create_project_with_task(project_params, task_params)

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;53.345&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.3&lt;/span&gt;ms queue&lt;span style=&#34;color: #666666&#34;&gt;=0.1&lt;/span&gt;ms
begin []

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;53.346&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=1.2&lt;/span&gt;ms
&lt;span style=&#34;color: #0000FF&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;projects&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;inserted_at&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;RETURNING&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}]
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.Changeset&amp;lt;action: :insert, changes: %{},&lt;/span&gt;
 &lt;span style=&#34;color: #B8860B&#34;&gt;errors&lt;/span&gt;: [&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: {&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;can&amp;#39;t be blank&amp;quot;&lt;/span&gt;, []}], &lt;span style=&#34;color: #B8860B&#34;&gt;data&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#EctoTransactions.Task&amp;lt;&amp;gt;,&lt;/span&gt;
 &lt;span style=&#34;color: #B8860B&#34;&gt;valid?&lt;/span&gt;: &lt;span style=&#34;color: #880000&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;53.348&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.2&lt;/span&gt;ms
rollback []
{&lt;span style=&#34;color: #B8860B&#34;&gt;:error&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:task&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you read with attention you will see two tupples &lt;code&gt;{:error, :project}&lt;/code&gt; and &lt;code&gt;{:error, :task}&lt;/code&gt; with this you can make the assumptions that you want, of course you could say a lot more and instead of returning tupples you return other things with more sense for example change &lt;code&gt;:project&lt;/code&gt; or &lt;code&gt;:task&lt;/code&gt; for his respective &lt;code&gt;changeset&lt;/code&gt; and you should see other things.&lt;/p&gt;

&lt;p&gt;By the way when use &lt;code&gt;Repo.transaction&lt;/code&gt; you should return the implicit data (that is the schema you are saving) that&amp;rsquo;s because &lt;code&gt;Repo.transaction&lt;/code&gt; return a tupple consisting of an &lt;code&gt;:ok&lt;/code&gt; atom and the respective last instruction. And if you use &lt;code&gt;Repo.insert&lt;/code&gt; as returning data you will see a tupple of tupple &lt;code&gt;{:ok, {:ok, data}}&lt;/code&gt; or &lt;code&gt;{:ok, {:error, data}}&lt;/code&gt; (thats because the return of an insert is &lt;code&gt;{:ok, data}&lt;/code&gt; or &lt;code&gt;{:error, data}&lt;/code&gt;) and that&amp;rsquo;s why we use &lt;code&gt;Repo.rollback&lt;/code&gt; for forcing a tupple consisting of &lt;code&gt;{:error, reason}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all folks! I hope this can help you. And remember Good Luck, Have Fun! and GG!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add complete bootstrap to Phoenix</title>
      <link>http://blog.makingdevs.com/2016/03/24/add-complete-bootstrap-to-phoenix</link>
      <pubDate>Thu, 24 Mar 2016 20:08:09 -0600</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/03/24/add-complete-bootstrap-to-phoenix</guid>
      <description>&lt;p&gt;It has been a while since I make a post and this is my first post in English so be gentle with me :P&lt;/p&gt;

&lt;p&gt;Since a couple of months I been working in a language called &lt;a href=&#34;http://elixir-lang.org/&#34;&gt;elixir&lt;/a&gt; and with his web framework &lt;a href=&#34;http://www.phoenixframework.org/&#34;&gt;phoenix&lt;/a&gt;, I have had a lot of fun with these elements. But sometimes I been struggling with configurations that should be easy maybe I don&amp;rsquo;t read that carefully or maybe I&amp;rsquo;m a knucklehead, but whatever the reasone is, I hope this configuration works for you and give you a little help of how configure your Javascripts third parties for your Phoenix application.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;When you create a new application with phoenix you will notice (when you start the server) that actually &lt;code&gt;phoenix&lt;/code&gt; have &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;bootstrap&lt;/a&gt; but that is not true at all, if you want to add a &lt;code&gt;dropdown&lt;/code&gt; or something more sophisticated like a &lt;code&gt;dialog&lt;/code&gt; or a &lt;code&gt;carousel&lt;/code&gt; you will find that there is no &lt;code&gt;javascript&lt;/code&gt; and the only thing that you have is the &lt;code&gt;stylesheet&lt;/code&gt; so in order to add the complete &lt;code&gt;bootstrap&lt;/code&gt; you need a couple steps before.&lt;/p&gt;

&lt;p&gt;Well let&amp;rsquo;s get started with this thing:&lt;/p&gt;

&lt;p&gt;In order to manage all the libraries that you need to work with it is recommended to install &lt;a href=&#34;http://bower.io/&#34;&gt;bower&lt;/a&gt;. Actually &lt;code&gt;phoenix&lt;/code&gt; in his &lt;a href=&#34;http://www.phoenixframework.org/docs/static-assets&#34;&gt;Static Assets&lt;/a&gt; page encourage you to do it.&lt;/p&gt;

&lt;p&gt;So we are going to follow this path and add bootstrap with &lt;code&gt;bower&lt;/code&gt; but first we are going to create the &lt;code&gt;bower.json&lt;/code&gt; file for storing our dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bower init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we are going to create a file named &lt;code&gt;.bowerrc&lt;/code&gt; with this file we are going to tell to &lt;code&gt;bower&lt;/code&gt; where are going to need to put all the &lt;code&gt;javascripts&lt;/code&gt; that we need it from now on. In this file we are going to put the next instruction:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;directory&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;web/static/vendor&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now is the time to install &lt;code&gt;bootstrap&lt;/code&gt; and for that we need to run the following instruction in your shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bower install -S bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have &lt;code&gt;bootstrap&lt;/code&gt; if you check your &lt;code&gt;vendor&lt;/code&gt; directory you will see that there is not only &lt;code&gt;bootstrap&lt;/code&gt;, it is also &lt;code&gt;jquery&lt;/code&gt; (because is a dependency for &lt;code&gt;bootstrap&lt;/code&gt;), if have not heard of &lt;code&gt;bower&lt;/code&gt; before I recommend you to look for other proyects it will save you a lot of time and space in your repository.&lt;/p&gt;

&lt;p&gt;Well at this moment, if you run your &lt;code&gt;phoenix.server&lt;/code&gt; you will find a couple of errors, so lets fix that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let&amp;rsquo;s remove the &lt;code&gt;bootstrap css&lt;/code&gt; that &lt;code&gt;phoenix&lt;/code&gt; ships with. For this open your &lt;code&gt;web/static/css/app.css&lt;/code&gt; and remove the first 6 lines of code of the file.&lt;/li&gt;
&lt;li&gt;Then open your &lt;code&gt;brunch-config.js&lt;/code&gt; and in the &lt;code&gt;conventions&lt;/code&gt; section add the following:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;   conventions&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
     assets&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BB6688&#34;&gt;/^(web\/static\/assets)/&lt;/span&gt;,
     ignored&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; [
       &lt;span style=&#34;color: #BB6688&#34;&gt;/^(web\/static\/vendor\/bootstrap\/)(?!.*min.(js|css)$)/&lt;/span&gt;,
       &lt;span style=&#34;color: #BB6688&#34;&gt;/^(web\/static\/vendor\/jquery\/)(?!.*min.js)/&lt;/span&gt;
     ]
   }
   
&lt;/pre&gt;&lt;/div&gt;

3. After that you will need to load &lt;code&gt;jquery&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt; in order, i.e. First &lt;code&gt;jquery&lt;/code&gt; and then &lt;code&gt;bootstrap&lt;/code&gt;. This is because &lt;code&gt;brunch&lt;/code&gt; will merge all js in alphabetical order and we require that &lt;code&gt;jquery&lt;/code&gt; loads first. For this we move to the &lt;code&gt;joinTo&lt;/code&gt; in the &lt;code&gt;files&lt;/code&gt; section and add the next lines:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;   files&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
     javascripts&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
       joinTo&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;js/app.js&amp;quot;&lt;/span&gt;,
       order&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
         before&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; [
           &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;web/static/vendor/jquery/dist/jquery.min.js&amp;quot;&lt;/span&gt;,
           &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;web/static/vendor/bootstrap/dist/js/bootstrap.js&amp;quot;&lt;/span&gt;
         ]
       }
     },
   ... more code ...
   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this you can open the main layout of your application and put the next code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdown&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;btn btn-default dropdown-toggle&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdownMenu1&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;data-toggle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdown&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;aria-haspopup&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;aria-expanded&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&amp;gt;
    Dropdown
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;caret&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;span&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;button&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdown-menu&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;aria-labelledby&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdownMenu1&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&amp;gt;Action&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&amp;gt;Another action&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&amp;gt;Something else here&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;separator&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;divider&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&amp;gt;Separated link&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;ul&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this is going to work as expected. Now you can make use of everything that &lt;code&gt;boostrap&lt;/code&gt; have.&lt;/p&gt;

&lt;p&gt;Oh! I forgot for copying the fonts and icons that &lt;code&gt;bootstrap&lt;/code&gt; have you need to use a tool called &lt;code&gt;assetsmanager-brunch&lt;/code&gt; this is for manage assets that are not minify or uglify like images or fonts. For this we need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;assetsmanager-brunch&lt;/code&gt; with &lt;code&gt;npm&lt;/code&gt; help. Run the following &lt;code&gt;npm install --save assetsmanager-brunch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then in the &lt;code&gt;plugins&lt;/code&gt; section add the following code:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;   assetsmanager&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
       copyTo&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
         &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;web/static/vendor/bootstrap/dist/fonts&amp;#39;&lt;/span&gt;]
       }
   }
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all folks! At least for this post I hope you enjoy and Good Luck, Have Fun!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>