<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Config on Blog de Making Devs</title>
    <link>http://blog.makingdevs.com/tags/config/</link>
    <description>Recent content in Config on Blog de Making Devs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Sep 2018 19:22:54 -0500</lastBuildDate>
    
	<atom:link href="http://blog.makingdevs.com/tags/config/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Entornos y configuración en Elixir</title>
      <link>http://blog.makingdevs.com/2018/09/04/entornos-y-configuraci%C3%B3n-en-elixir/</link>
      <pubDate>Tue, 04 Sep 2018 19:22:54 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2018/09/04/entornos-y-configuraci%C3%B3n-en-elixir/</guid>
      <description>Al estar desarollando un par de proyectos en Elixir, me di a la labor de tanto meter pruebas como usar elementos que simulen llamadas a otros sistemas. Y descubrí que Elixir cuenta con ello de formas distintas a lo que ya había manejado en otras plataformas, y sólo quiero ejemplificar un par de ellos, se que puede haber más o mejores pero estos me sirvieron para ciertos própositos.
Simulación de componentes Mientras estaba desarrollando algo con Nerves y usando la cámara conectada a un Rasperry, me di cuenta que la biblioteca que manejaba la cámara contaba con una implementación que proveía la manera de simular el tomar una foto, dentro del archivo de configuración de la aplicacion config.</description>
    </item>
    
  </channel>
</rss>