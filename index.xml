<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog de Making Devs</title>
    <link>http://blog.makingdevs.com/index.xml</link>
    <description>Recent content on Blog de Making Devs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Nov 2016 16:46:05 -0600</lastBuildDate>
    <atom:link href="http://blog.makingdevs.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Capistrano para despliegues de apps Rails</title>
      <link>http://blog.makingdevs.com/2016/11/30/capistrano-para-despliegues-de-apps-rails</link>
      <pubDate>Wed, 30 Nov 2016 16:46:05 -0600</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/11/30/capistrano-para-despliegues-de-apps-rails</guid>
      <description>

&lt;p&gt;Hace tiempo que estabamos haciendo una aplicación &lt;em&gt;Rails&lt;/em&gt;, me di a la tarear de investigar el tema obviado que es la forma en como se hace un despliegue lo más ordenado posible. Inclusive le pregunte al gran maestro @chillicoder al respecto, y efectivamente, mis sospechas eran correctas tenía que usar Capistrano(aunque chilli parece usar otra cosa), incluída la recomendación del maestro.&lt;/p&gt;

&lt;p&gt;Obviaré las partes de las instalaciones de las gemas y me enfocaré en el problema que tuve que resolver: un par de ambientes a instalar para una API hecha en Rails.&lt;/p&gt;

&lt;p&gt;Para ser honesto me sorprendió lo estructurado en que se puede hacer un despliegue con Capistrano, incluso me gusto mucho que la recomendación siempre era la misma, dando pie a una buena forma de hacer dicho deploy.&lt;/p&gt;

&lt;h2 id=&#34;el-archivo-config-deploy-rb&#34;&gt;El archivo &lt;em&gt;config/deploy.rb&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Cuando instalas Capistrano, viene consigo un archivo &lt;em&gt;deploy.rb&lt;/em&gt; en donde puse lo siguiente:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# config valid only for current version of Capistrano&lt;/span&gt;
lock &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;3.6.1&amp;#39;&lt;/span&gt;

set &lt;span style=&#34;color: #B8860B&#34;&gt;:application&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;barista&amp;#39;&lt;/span&gt;
set &lt;span style=&#34;color: #B8860B&#34;&gt;:repo_url&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;git@github.com:makingdevs/MyBarista.git&amp;#39;&lt;/span&gt;
set &lt;span style=&#34;color: #B8860B&#34;&gt;:rbenv_ruby&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;2.2.3&amp;#39;&lt;/span&gt;

set &lt;span style=&#34;color: #B8860B&#34;&gt;:repo_tree&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;ruby_app&amp;#39;&lt;/span&gt;

set &lt;span style=&#34;color: #B8860B&#34;&gt;:puma_user&lt;/span&gt;, fetch(&lt;span style=&#34;color: #B8860B&#34;&gt;:user&lt;/span&gt;)
set &lt;span style=&#34;color: #B8860B&#34;&gt;:linked_dirs&lt;/span&gt;, fetch(&lt;span style=&#34;color: #B8860B&#34;&gt;:linked_dirs&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;push(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;tmp/pids&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;tmp/cache&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;tmp/sockets&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;vendor/bundle&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;public/system&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;public/uploads&amp;#39;&lt;/span&gt;)
set &lt;span style=&#34;color: #B8860B&#34;&gt;:linked_files&lt;/span&gt;, fetch(&lt;span style=&#34;color: #B8860B&#34;&gt;:linked_files&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;push(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;config/database.yml&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;config/secrets.yml&amp;#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aquí hay varias cosas que me gustaria comentar:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:repo_tree&lt;/code&gt; te ayuda a desplegar una carpeta interna del directorio base del repo, que es nuestro caso&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:linked_dirs&lt;/code&gt; ayuda a crear enlances simbólicos de ciertos directorios que necesitarías&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:linked_file&lt;/code&gt; excelente forma de hacer enlaces simbólicos de archivos que contienen la configuración externa, si no quieres usar variables de ambiente o sistema.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Adicional a esto, en el mismo archivo tuve que eliminar algunas tareas y crear algunas para el manejo de puma:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;Rake&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;deploy:assets:precompile&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;].&lt;/span&gt;clear_actions
&lt;span style=&#34;color: #880000&#34;&gt;Rake&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;deploy:assets:backup_manifest&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;].&lt;/span&gt;clear_actions

namespace &lt;span style=&#34;color: #B8860B&#34;&gt;:puma&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
  desc &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;Create Directories for Puma Pids and Socket&amp;#39;&lt;/span&gt;
  task &lt;span style=&#34;color: #B8860B&#34;&gt;:make_dirs&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    on roles(&lt;span style=&#34;color: #B8860B&#34;&gt;:app&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      execute &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;mkdir &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;shared_path&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;/tmp/sockets -p&amp;quot;&lt;/span&gt;
      execute &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;mkdir &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;shared_path&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;/tmp/pids -p&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

  before &lt;span style=&#34;color: #B8860B&#34;&gt;:start&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:make_dirs&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

namespace &lt;span style=&#34;color: #B8860B&#34;&gt;:deploy&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
  desc &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Make sure local git is in sync with remote.&amp;quot;&lt;/span&gt;
  task &lt;span style=&#34;color: #B8860B&#34;&gt;:check_revision&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    on roles(&lt;span style=&#34;color: #B8860B&#34;&gt;:app&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;`git rev-parse HEAD`&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;`git rev-parse origin/master`&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;WARNING: HEAD is not the same as origin/master&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Run `git push` to sync changes.&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;exit&lt;/span&gt;
      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

  desc &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;Initial Deploy&amp;#39;&lt;/span&gt;
  task &lt;span style=&#34;color: #B8860B&#34;&gt;:initial&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    on roles(&lt;span style=&#34;color: #B8860B&#34;&gt;:app&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      before &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;deploy:restart&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;puma:start&amp;#39;&lt;/span&gt;
      invoke &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;deploy&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

  desc &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;Restart application&amp;#39;&lt;/span&gt;
  task &lt;span style=&#34;color: #B8860B&#34;&gt;:restart&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    on roles(&lt;span style=&#34;color: #B8860B&#34;&gt;:app&lt;/span&gt;), &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt;: &lt;span style=&#34;color: #B8860B&#34;&gt;:sequence&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;wait&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      invoke &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;puma:restart&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

  before &lt;span style=&#34;color: #B8860B&#34;&gt;:starting&lt;/span&gt;,     &lt;span style=&#34;color: #B8860B&#34;&gt;:check_revision&lt;/span&gt;
  after  &lt;span style=&#34;color: #B8860B&#34;&gt;:finishing&lt;/span&gt;,    &lt;span style=&#34;color: #B8860B&#34;&gt;:cleanup&lt;/span&gt;
  after  &lt;span style=&#34;color: #B8860B&#34;&gt;:finishing&lt;/span&gt;,    &lt;span style=&#34;color: #B8860B&#34;&gt;:restart&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;los-archivos-de-ambientes&#34;&gt;Los archivos de ambientes&lt;/h2&gt;

&lt;p&gt;Dentro del directorio &lt;em&gt;config/deploy/&lt;/em&gt; existen un par de archivos que nos ayudan a definir elementos particulares de la instalación por cada ambiente, lo único que yo hice fue habilitar la máquina a través de autenticación de llave pública con el servidor de despliegue para que se pudieran comunicar por ssh. Y mis archivos quedaron así:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;set &lt;span style=&#34;color: #B8860B&#34;&gt;:stage&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:production&lt;/span&gt;
set &lt;span style=&#34;color: #B8860B&#34;&gt;:puma_bind&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;%w(tcp://0.0.0.0:3000)&lt;/span&gt;
set &lt;span style=&#34;color: #B8860B&#34;&gt;:branch&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;
set &lt;span style=&#34;color: #B8860B&#34;&gt;:deploy_to&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;/var/www/&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;fetch(&lt;span style=&#34;color: #B8860B&#34;&gt;:application&lt;/span&gt;)&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;/production&amp;quot;&lt;/span&gt;

server &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;powerful.makingdevs.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;user&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;centos-user&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;roles&lt;/span&gt;: &lt;span style=&#34;color: #008000&#34;&gt;%w{app web}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;set &lt;span style=&#34;color: #B8860B&#34;&gt;:stage&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:stage&lt;/span&gt;
set &lt;span style=&#34;color: #B8860B&#34;&gt;:puma_bind&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;%w(tcp://0.0.0.0:3001)&lt;/span&gt;
set &lt;span style=&#34;color: #B8860B&#34;&gt;:branch&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;stage&amp;#39;&lt;/span&gt;
set &lt;span style=&#34;color: #B8860B&#34;&gt;:deploy_to&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;/var/www/&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;fetch(&lt;span style=&#34;color: #B8860B&#34;&gt;:application&lt;/span&gt;)&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;/stage&amp;quot;&lt;/span&gt;

server &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;powerful.makingdevs.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;user&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;centos-user&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;roles&lt;/span&gt;: &lt;span style=&#34;color: #008000&#34;&gt;%w{app web}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En donde puedo definir incluso el branch del repo que quiero desplegar, el puerto de puma donde quiero levantar y que no colisionen entre sí, y un directorio basado en el ambiente.&lt;/p&gt;

&lt;p&gt;Me gusta mucho el control que tiene Capistrano para revertir una versión, pues lo ordena de tal forma que guarda algunos respaldos de versiones desplegadas anteriormente listas para resintalarlse en caso de que algo salga mal.&lt;/p&gt;

&lt;p&gt;Capistrano hace todo, la transferencia de archivos, el ordenamiento, la instalación de puma y de las gemas de la app, incluso del propio runtime de Ruby, la creación de enlaces simbólicos, la descarga de cambios del repo, etc.&lt;/p&gt;

&lt;p&gt;Capistrano es la herramienta.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FizzBuzz</title>
      <link>http://blog.makingdevs.com/2016/11/05/fizzbuzz</link>
      <pubDate>Sat, 05 Nov 2016 19:35:08 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/11/05/fizzbuzz</guid>
      <description>&lt;p&gt;Before we pass to how we can make a &lt;em&gt;FizzBuzz&lt;/em&gt; game, we need to know something more basic about &lt;code&gt;Elixir&lt;/code&gt;. Today we are going to learn something called &lt;em&gt;Anonymous Function&lt;/em&gt; (a.k.a Lambda Expression)&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;Anonymous Function&lt;/em&gt; is a function without a name and is usually used for applying some sort of transformation to the arguments passed.&lt;/p&gt;

&lt;p&gt;According to &lt;em&gt;Wikipedia&lt;/em&gt; an &lt;em&gt;Anonymous Function&lt;/em&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A function definition that is not bound to an identifier. &lt;a href=&#34;https://en.wikipedia.org/wiki/Anonymous_function&#34;&gt;Anonymous functions&lt;/a&gt; are often&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arguments being passed to higher-order functions, or&lt;/li&gt;
&lt;li&gt;Used for constructing the result of a higher-order function that needs to return a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, in &lt;code&gt;elixir&lt;/code&gt; the way that we can create an &lt;em&gt;Anonymous Function&lt;/em&gt; is with the &lt;code&gt;fn&lt;/code&gt; keyword:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt;
  argument &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; body
  argument &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; body
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An easy example of an &lt;em&gt;Anonymous Function&lt;/em&gt; is a multiplication of a number by 5.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;iex(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; times_5 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt;(a) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Function&amp;lt;6.52032458/1 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; times_5&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The line (&lt;code&gt;times_5 = fn(a) -&amp;gt; a * 5 end&lt;/code&gt;) creates a function that takes one parameter and the implementation of the function is after the &lt;code&gt;-&amp;gt;&lt;/code&gt; and is terminated by the &lt;code&gt;end&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;And the other line is the execution of the function using a dot &lt;code&gt;.&lt;/code&gt; between the variable(let&amp;rsquo;s call it that way) and the parenthesis.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep in mind a variable assigned inside a function does not affect its surrounding environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So given this explanation we can make a little game called &lt;code&gt;FizzBuzz&lt;/code&gt;. If you never heard about it this is a brief description:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any number divisible by three is replaced by the word Fizz&lt;/li&gt;
&lt;li&gt;Any number divisible by five is replaced by  the word Buzz.&lt;/li&gt;
&lt;li&gt;Any number divisible by both become FizzBuzz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With our example we are going to make use of the &lt;em&gt;Anonymous Functions&lt;/em&gt; that we already explain above.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;iex(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; fizz_buzz &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color: #AA22FF&#34;&gt;_&lt;/span&gt;, c &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; c
...(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Function&amp;lt;18.52032458/3 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; number_to_eval &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt;
...(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;   n &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; fizz_buzz&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;(rem(n, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;), rem(n, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;), n)
...(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Function&amp;lt;6.52032458/1 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;
iex(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1..16&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;to_list &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Enum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;map(number_to_eval)
[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;14&lt;/span&gt;,
 &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;number_to_eval&lt;/code&gt; is an &lt;em&gt;Anonymous Function&lt;/em&gt; that wrap the implementation of another &lt;em&gt;Anonymous Function&lt;/em&gt; &lt;code&gt;fizz_buzz&lt;/code&gt;. &lt;code&gt;number_to_eval&lt;/code&gt; is going to take one argument and pass the remnant of that number divided by &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; and the number itself to the &lt;code&gt;fizz_buzz&lt;/code&gt; function. In the &lt;code&gt;fizz_buzz&lt;/code&gt; function we are going to make use of the patter match.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the remnant by &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;is &lt;code&gt;0&lt;/code&gt; we are going to return &lt;code&gt;FizzBuzz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the remnant by &lt;code&gt;3&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; we are going to return &lt;code&gt;Fizz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the remnant by &lt;code&gt;5&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; we are going to return &lt;code&gt;Buzz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If doesn&amp;rsquo;t match to any of above we are going to return the same number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And in the next lines we are going to eval sixteen numbers.&lt;/p&gt;

&lt;p&gt;In this example we can make a good use for &lt;em&gt;Anonymous Functions&lt;/em&gt; and how we can apply on a &lt;code&gt;Enum.map&lt;/code&gt; module. This is brief and of course you can make a good use of it in another situations but is a little beyond the scope of this post.&lt;/p&gt;

&lt;p&gt;So I hope you enjoy this can help you to make something else and for me that&amp;rsquo;s all. Good Luck, Have Fun and GG!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Presentación en Android Nights</title>
      <link>http://blog.makingdevs.com/2016/09/22/presentaci%C3%B3n-en-android-nights</link>
      <pubDate>Thu, 22 Sep 2016 15:06:05 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/09/22/presentaci%C3%B3n-en-android-nights</guid>
      <description>&lt;p&gt;El pasado 18 de Agosto de 2016 tuvimos la oportunidad de presentar un conjunto de ideas en la &lt;a href=&#34;http://www.seleniumhq.org/projects/webdriver/&#34;&gt;Activity #15&lt;/a&gt;, creando una aplicación con el lenguaje Groovy como herramienta principal. Lo importante de esta presentación fue el conjunto de técnicas que ocupamos con ayuda del lenguaje dinámico Groovy combinando lo que mucha gente ya conoce en Java pero de una forma divertida, inclusivo descubrimos algunos patrones que en iOS son más naturales.&lt;/p&gt;

&lt;p&gt;Sin embargo, contamos con la habilidad de @karlosins, quién nos ayudó a crear una facilitación gráfica que describe mucho mejor lo que yo podría escribir, así que les dejo la ilustración y la presentación.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.makingdevs.com/images/page-1.jpg&#34; alt=&#34;Page 1&#34; /&gt;
&lt;img src=&#34;http://blog.makingdevs.com/images/page-2.jpg&#34; alt=&#34;Page 2&#34; /&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;iframe width=&#34;752&#34; height=&#34;459&#34; src=&#34;http://android.makingdevs.com/#/1&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://android.makingdevs.com/#/1&#34;&gt;Original de la presentación&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://barist.coffee&#34;&gt;barist.coffee en Google Play&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ecto Transactions</title>
      <link>http://blog.makingdevs.com/2016/09/20/ecto-transactions</link>
      <pubDate>Tue, 20 Sep 2016 19:35:08 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/09/20/ecto-transactions</guid>
      <description>&lt;p&gt;It has been a couple of months since I wrote something and was about &lt;code&gt;phoenix&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt;. Today I&amp;rsquo;m going to talk about &lt;code&gt;elixir&lt;/code&gt;, &lt;code&gt;ecto&lt;/code&gt; and how to manage &lt;code&gt;transactions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Well in this post we are going to skip &lt;code&gt;ecto setup&lt;/code&gt; (if for some way, it was need it, please leave a comment and I will make a post for it, but I think his &lt;a href=&#34;https://github.com/elixir-ecto/ecto&#34;&gt;documentation&lt;/a&gt; makes a fairly good example for it)&lt;/p&gt;

&lt;p&gt;With that in mind, these are the tables that we are going to use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Project table
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Project&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto.Schema&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto.Changeset&lt;/span&gt;

  schema &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;projects&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    field &lt;span style=&#34;color: #B8860B&#34;&gt;:name&lt;/span&gt;
    has_many &lt;span style=&#34;color: #B8860B&#34;&gt;:tasks&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Task&lt;/span&gt;

    timestamps
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;def&lt;/span&gt; changeset(struct, params \\ %{}) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    struct
    &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; cast(params, [&lt;span style=&#34;color: #B8860B&#34;&gt;:name&lt;/span&gt;])
    &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; validate_required([&lt;span style=&#34;color: #B8860B&#34;&gt;:name&lt;/span&gt;])
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Task table
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Task&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto.Schema&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto.Changeset&lt;/span&gt;

  schema &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    field &lt;span style=&#34;color: #B8860B&#34;&gt;:description&lt;/span&gt;
    belongs_to &lt;span style=&#34;color: #B8860B&#34;&gt;:project&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Project&lt;/span&gt;

    timestamps
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;def&lt;/span&gt; changeset(struct, params \\ %{}) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
    struct
    &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; cast(params, [&lt;span style=&#34;color: #B8860B&#34;&gt;:description&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:project_id&lt;/span&gt;])
    &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; validate_required([&lt;span style=&#34;color: #B8860B&#34;&gt;:description&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:project_id&lt;/span&gt;])
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With both tables we can see that &lt;code&gt;Task&lt;/code&gt; depends from &lt;code&gt;Project&lt;/code&gt;. So we are going to create a &lt;code&gt;project&lt;/code&gt; with a &lt;code&gt;task&lt;/code&gt; and we are going to see how can we handle a creation like that.&lt;/p&gt;

&lt;p&gt;The first thing we should know is, how can we create a transaction? With this instruction &lt;code&gt;Repo.transaction(fn -&amp;gt; end)&lt;/code&gt; Between &lt;code&gt;arrow&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; we put the code that we need. And for making a &lt;code&gt;rollback&lt;/code&gt; we use &lt;code&gt;Repo.rollback(value)&lt;/code&gt; and between parenthesis we can indicate the reason of why we are making that decision.&lt;/p&gt;

&lt;p&gt;So we are going to create a module for handling this&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.App&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Ecto&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Repo&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Project&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Task&lt;/span&gt;

    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# creating project and task&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;def&lt;/span&gt; create_project_with_task(project_params, task_params) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;transaction(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;
        project_params
        &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; create_project_with_params
        &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; add_task_to_project(task_params)
      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;)
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# creating project&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defp&lt;/span&gt; create_project_with_params(project_params) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      %&lt;span style=&#34;color: #0000FF&#34;&gt;Project&lt;/span&gt;{}
      &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Project&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;changeset(project_params)
      &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;insert
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# adding a task to a valid project&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defp&lt;/span&gt; add_task_to_project({&lt;span style=&#34;color: #B8860B&#34;&gt;:ok&lt;/span&gt;, project}, task_params) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
      changeset &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; project
                  &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; build_assoc(&lt;span style=&#34;color: #B8860B&#34;&gt;:tasks&lt;/span&gt;)
                  &lt;span style=&#34;color: #666666&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;changeset(task_params)

      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;insert(changeset) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt;
        {&lt;span style=&#34;color: #B8860B&#34;&gt;:ok&lt;/span&gt;, _task} &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; project
        {&lt;span style=&#34;color: #B8860B&#34;&gt;:error&lt;/span&gt;, changeset} &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;rollback(&lt;span style=&#34;color: #B8860B&#34;&gt;:task&lt;/span&gt;) &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# Rollback transaction for invalid task data&lt;/span&gt;
      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defp&lt;/span&gt; add_task_to_project({&lt;span style=&#34;color: #B8860B&#34;&gt;:error&lt;/span&gt;, _changeset}, _task_params),
    &lt;span style=&#34;color: #B8860B&#34;&gt;do&lt;/span&gt;: &lt;span style=&#34;color: #0000FF&#34;&gt;Repo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;rollback(&lt;span style=&#34;color: #B8860B&#34;&gt;:project&lt;/span&gt;) &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;# Rollback transaction for invalid project data&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if we use &lt;code&gt;iex -S mix&lt;/code&gt; and passing some args to this we can obtain the following results&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Passing good options
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;iex(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; project_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Should create task for example&amp;quot;&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Should create task for example&amp;quot;&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.App&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;create_project_with_task(project_params, task_params)

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;59.905&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.2&lt;/span&gt;ms queue&lt;span style=&#34;color: #666666&#34;&gt;=0.1&lt;/span&gt;ms
begin []

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;59.917&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.9&lt;/span&gt;ms
&lt;span style=&#34;color: #0000FF&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;projects&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;inserted_at&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;RETURNING&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}]

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;59.921&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=3.1&lt;/span&gt;ms
&lt;span style=&#34;color: #0000FF&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;project_id&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;inserted_at&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;RETURNING&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Should create task for example&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}]

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;59.922&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.3&lt;/span&gt;ms
commit []
{&lt;span style=&#34;color: #B8860B&#34;&gt;:ok&lt;/span&gt;,
 %&lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.Project&lt;/span&gt;{&lt;span style=&#34;color: #B8860B&#34;&gt;__meta__&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.Schema.Metadata&amp;lt;:loaded, &amp;quot;projects&amp;quot;&amp;gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #B8860B&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;inserted_at&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.DateTime&amp;lt;2016-09-21 03:28:59&amp;gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #B8860B&#34;&gt;tasks&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.Association.NotLoaded&amp;lt;association :tasks is not loaded&amp;gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #B8860B&#34;&gt;updated_at&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.DateTime&amp;lt;2016-09-21 03:28:59&amp;gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;ecto_simple&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;from&lt;/span&gt; projects; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;from&lt;/span&gt; tasks;
&lt;span style=&#34;color: #888888&#34;&gt;+------+---------------------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|   id | name                      | inserted_at         | updated_at          |&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|------+---------------------------+---------------------+---------------------|&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|    1 | Explain ecto transactions | 2016-09-21 03:28:59 | 2016-09-21 03:28:59 |&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;+------+---------------------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;SELECT 1&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;+------+--------------------------------+--------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|   id | description                    |   project_id | inserted_at         | updated_at          |&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|------+--------------------------------+--------------+---------------------+---------------------|&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;|    1 | Should create task for example |            1 | 2016-09-21 03:28:59 | 2016-09-21 03:28:59 |&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;+------+--------------------------------+--------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;SELECT 1&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;Time: 0.003s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And for bad data we can obtain next results:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;iex(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; project_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color: #880000&#34;&gt;nil&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color: #880000&#34;&gt;nil&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.App&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;create_project_with_task(project_params, task_params)

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;25.863&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.2&lt;/span&gt;ms
begin []

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;25.865&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.2&lt;/span&gt;ms
rollback []
{&lt;span style=&#34;color: #B8860B&#34;&gt;:error&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:project&lt;/span&gt;}

iex(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; project_params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; %{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;}
%{&lt;span style=&#34;color: #B8860B&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EctoTransactions.App&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;create_project_with_task(project_params, task_params)

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;53.345&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.3&lt;/span&gt;ms queue&lt;span style=&#34;color: #666666&#34;&gt;=0.1&lt;/span&gt;ms
begin []

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;53.346&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=1.2&lt;/span&gt;ms
&lt;span style=&#34;color: #0000FF&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;projects&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;inserted_at&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color: #0000FF&#34;&gt;RETURNING&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Explain ecto transactions&amp;quot;&lt;/span&gt;, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}, {{&lt;span style=&#34;color: #666666&#34;&gt;2016&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;}}]
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#Ecto.Changeset&amp;lt;action: :insert, changes: %{},&lt;/span&gt;
 &lt;span style=&#34;color: #B8860B&#34;&gt;errors&lt;/span&gt;: [&lt;span style=&#34;color: #B8860B&#34;&gt;description&lt;/span&gt;: {&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;can&amp;#39;t be blank&amp;quot;&lt;/span&gt;, []}], &lt;span style=&#34;color: #B8860B&#34;&gt;data&lt;/span&gt;: &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;#EctoTransactions.Task&amp;lt;&amp;gt;,&lt;/span&gt;
 &lt;span style=&#34;color: #B8860B&#34;&gt;valid?&lt;/span&gt;: &lt;span style=&#34;color: #880000&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;49&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;53.348&lt;/span&gt; [debug] &lt;span style=&#34;color: #0000FF&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;OK&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;=0.2&lt;/span&gt;ms
rollback []
{&lt;span style=&#34;color: #B8860B&#34;&gt;:error&lt;/span&gt;, &lt;span style=&#34;color: #B8860B&#34;&gt;:task&lt;/span&gt;}
iex(&lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you read with attention you will see two tupples &lt;code&gt;{:error, :project}&lt;/code&gt; and &lt;code&gt;{:error, :task}&lt;/code&gt; with this you can make the assumptions that you want, of course you could say a lot more and instead of returning tupples you return other things with more sense for example change &lt;code&gt;:project&lt;/code&gt; or &lt;code&gt;:task&lt;/code&gt; for his respective &lt;code&gt;changeset&lt;/code&gt; and you should see other things.&lt;/p&gt;

&lt;p&gt;By the way when use &lt;code&gt;Repo.transaction&lt;/code&gt; you should return the implicit data (that is the schema you are saving) that&amp;rsquo;s because &lt;code&gt;Repo.transaction&lt;/code&gt; return a tupple consisting of an &lt;code&gt;:ok&lt;/code&gt; atom and the respective last instruction. And if you use &lt;code&gt;Repo.insert&lt;/code&gt; as returning data you will see a tupple of tupple &lt;code&gt;{:ok, {:ok, data}}&lt;/code&gt; or &lt;code&gt;{:ok, {:error, data}}&lt;/code&gt; (thats because the return of an insert is &lt;code&gt;{:ok, data}&lt;/code&gt; or &lt;code&gt;{:error, data}&lt;/code&gt;) and that&amp;rsquo;s why we use &lt;code&gt;Repo.rollback&lt;/code&gt; for forcing a tupple consisting of &lt;code&gt;{:error, reason}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all folks! I hope this can help you. And remember Good Luck, Have Fun! and GG!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Routing en Elm</title>
      <link>http://blog.makingdevs.com/2016/09/10/routing-en-elm</link>
      <pubDate>Sat, 10 Sep 2016 11:22:01 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/09/10/routing-en-elm</guid>
      <description>

&lt;p&gt;La URL es un bit interesante de nuestra applicación, nos permite regresar a un estado, o compartir ese estado con alguien más; y en Elm, el Routing, es la segunda cosa más importante que deberías conocer después del propio lenguaje. Así que empecemos.&lt;/p&gt;

&lt;h3 id=&#34;anatomía-de-una-url&#34;&gt;ANATOMÍA DE UNA URL&lt;/h3&gt;

&lt;p&gt;Una URL es una dirección dada para un recurso único en la web y está compuesta de diferentes partes: un protocolo, un host, un nombre de dominio, opcionalmente un path y el nombre del archivo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http_URL = &amp;quot;http:&amp;quot; &amp;quot;//&amp;quot; host [&amp;quot;:&amp;quot; port][ abs_path [&amp;quot;?&amp;quot; query ]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para el caso del routing en Elm sólo nos incumben aquellas que pueden ser opcionales.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[ abs_path [&amp;quot;?&amp;quot; query ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Teniendo esto en mente, continuemos.&lt;/p&gt;

&lt;h3 id=&#34;instalando-dependencias&#34;&gt;INSTALANDO DEPENDENCIAS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Vamos a necesitar esta biblioteca para controlar la navegación.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;elm package install elm-lang/navigation&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Y esta otra para transformar nuestras URLs en estructuras de datos agradables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;elm package navigation evancz/url-parser&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Por último necesitaremos la función &lt;code&gt;Navigation.program&lt;/code&gt; que vive dentro del módulo &lt;code&gt;Navigation&lt;/code&gt;, su tarea será tomar el &lt;code&gt;parser&lt;/code&gt; y un &lt;code&gt;record&lt;/code&gt; para poder regresarnos un programa Elm.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;empieza-configurando-la-aplicación&#34;&gt;EMPIEZA CONFIGURANDO LA APLICACIÓN&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Navigation.program&lt;/code&gt; nos proveé de una función &lt;code&gt;urlUpdate&lt;/code&gt; para actualizar el modelo cada que el &lt;code&gt;parser&lt;/code&gt;produzca nuevos datos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/gothwski/7bfeec986a90d34eb283830d8903081f.js?file=1-routing-with.elm&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;define-las-rutas&#34;&gt;DEFINE LAS RUTAS.&lt;/h3&gt;

&lt;p&gt;Es importante mencionar que el orden de los matchers importa, para más detalle sobre ello revisa la &lt;a href=&#34;http://package.elm-lang.org/packages/evancz/url-parser/latest/&#34;&gt;documentación&lt;/a&gt;&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/gothwski/7bfeec986a90d34eb283830d8903081f.js?file=2-routes.elm&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;así-es-como-funciona-y-se-implementa&#34;&gt;ASÍ ES COMO FUNCIONA&amp;hellip; Y SE IMPLEMENTA.&lt;/h3&gt;

&lt;p&gt;Cuando queremos acceder a un documento en particular de un servidor web, escribimos una &lt;code&gt;URL&lt;/code&gt; en la location bar, y un par de cosas suceden: primeramente la URL es partida en sus diferentes partes. Es entonces cuando la biblioteca &lt;code&gt;Navigation&lt;/code&gt; nos genera un record &lt;code&gt;Navigation.Location&lt;/code&gt; con dos partes de ella: el Path y los Parámetros, e inmediatamente manda llamar al &lt;code&gt;parser&lt;/code&gt; quien será el responsable de transformar esa &lt;code&gt;URL&lt;/code&gt; de tipo &lt;code&gt;String&lt;/code&gt; en datos útiles.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/gothwski/7bfeec986a90d34eb283830d8903081f.js?file=3-parser.elm&#34;&gt;&lt;/script&gt;

&lt;p&gt;Es entonces cuando este record es tomado por una función llamada &lt;code&gt;hashParser&lt;/code&gt; que enviará el &lt;code&gt;string&lt;/code&gt; resultante a la función &lt;code&gt;Navigation.makeParser&lt;/code&gt;que vive dentro de &lt;code&gt;parser&lt;/code&gt;, y así mismo se incluirán como párametro las rutas que ya hemos definido anteriormente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/gothwski/7bfeec986a90d34eb283830d8903081f.js?file=4-navigation-location.elm&#34;&gt;&lt;/script&gt;

&lt;p&gt;Finalmente el &lt;code&gt;parser&lt;/code&gt; regresa un resultado, si es &lt;code&gt;OK&lt;/code&gt; nos devolerá la ruta que hace match y definiremos la acción correspondiente, de lo contrario caeremos en el &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/gothwski/7bfeec986a90d34eb283830d8903081f.js?file=5-url-update.elm&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Uso de camara en android</title>
      <link>http://blog.makingdevs.com/2016/07/20/uso-de-camara-en-android</link>
      <pubDate>Wed, 20 Jul 2016 22:53:27 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/07/20/uso-de-camara-en-android</guid>
      <description>

&lt;p&gt;Android se enfoca al desarrollo móvil, como es de esperarse cuenta con las herramientas necesarias para hacer uso del hardware, en esta ocasión se mostrará cómo usar la cámara en un Activity. Adicionalmente, el ejemplo está hecho en Groovy, puedes leer más al respecto en el post anterior.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;intent-en-android&#34;&gt;Intent en android&lt;/h2&gt;

&lt;p&gt;Para poder hacer uso de la cámara se realiza mediante intent, que son el mecanismo por el cual se comunica la aplicación en tiempo de ejecución con otros componentes, así como lanzar eventos, se cuenta con dos tipos los cuales son:
&lt;strong&gt;Intento implícito&lt;/strong&gt;
Se puede iniciar una actividad en otra aplicación en el dispositivo
&lt;strong&gt;Intento explicito&lt;/strong&gt;
Se especifica la clase de la actividad a empezar para que el sistema operativo la inicie&lt;/p&gt;

&lt;h2 id=&#34;acceso-a-la-cámara&#34;&gt;Acceso a la cámara&lt;/h2&gt;

&lt;p&gt;Android cuenta con la clase &lt;strong&gt;MediaStore&lt;/strong&gt;, esta se encarga de proveer los medios de comunicación, el que nos interesa es &lt;strong&gt;ACTION_IMAGE_CAPTURE&lt;/strong&gt;, este en el intent con el cual podemos hacer uso de la cámara.
El siguiente metodo muestra como usar la camara nativa de Android, la clase que se encarga de usarlo es &lt;strong&gt;ExampleCamera&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;launchCamera&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
		Intent camera &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; Intent&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;MediaStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;ACTION_IMAGE_CAPTURE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;camera&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;resolveActivity&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getPackageManager&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
				filePhoto &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; createPhoto&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;IMG_&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
				&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;IOException ex&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
					Log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;TAG&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Error ${ex.message}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
				&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
				&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;filePhoto&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
					camera&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;putExtra&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;MediaStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;EXTRA_OUTPUT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Uri&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;fromFile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;filePhoto&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
					startActivityForResult&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;camera&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; CAPTURE_IMAGE&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;almacenamiento-externo&#34;&gt;Almacenamiento externo&lt;/h2&gt;

&lt;p&gt;Al capturar una foto, esta debe ser almacenada para poder ser usada posteriormente, Android provee una unidad principal para ello, la cual puede ser su almacenamiento interno o una memoria SD.&lt;/p&gt;

&lt;p&gt;Para acceder a ese directorio, Android cuenta con una clase llamada &lt;strong&gt;Environment&lt;/strong&gt;, el método que regresa el directorio de almacenamiento común/externo es &lt;strong&gt;getExternalStoragePublicDirectory(…)&lt;/strong&gt;, el tipo de archivo son imágenes por lo cual el parámetro para este caso será &lt;strong&gt;Environment.DIRECTORY_PICTURES&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;El método &lt;strong&gt;createPhoto(&amp;hellip;)&lt;/strong&gt; se encarga de crear un directorio denominado &lt;strong&gt;ExampleCamera&lt;/strong&gt; dentro de &lt;strong&gt;PICTURES&lt;/strong&gt;, además de generar el archivo para cada foto, un dato interesante es que no se realizó el import de la clase &lt;strong&gt;File&lt;/strong&gt;, la razón es que al usar &lt;strong&gt;groovy&lt;/strong&gt;, ciertos paquetes vienen incluidos por default.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	File &lt;span style=&#34;color: #00A000&#34;&gt;createPhoto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
		File storagePhotos &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Environment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;getExternalStoragePublicDirectory&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Environment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;DIRECTORY_PICTURES&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;ExampleCamera&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;storagePhotos&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;storagePhotos&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;mkdirs&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
				Log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;TAG&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Error al crear directorio&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;storagePhotos&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; File&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;separator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;${name + new Date().format(&amp;quot;&lt;/span&gt;ddMMyyyy_HHmmss&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;)}.jpg&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;manipular-el-resultado-de-la-cámara&#34;&gt;Manipular el resultado de la cámara&lt;/h2&gt;

&lt;p&gt;Cuando se captura la foto, una vez que termina se maneja el resultado con el método onActivityResult(…), donde se verifica el estatus de la captura de la foto, ya sea que se culminó o cancelado, ante lo cual se muestra un mensaje emergente haciendo uso de los &lt;strong&gt;Toast&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;onActivityResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; requestCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; resultCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Intent data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;onActivityResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;requestCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; resultCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;requestCode &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; CAPTURE_IMAGE&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;resultCode &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; RESULT_OK&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
				Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getApplicationContext&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Exito al crear la foto&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
			&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;resultCode &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; RESULT_CANCELED&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
				Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Se cancelo la foto&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;LENGTH_LONG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
			&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
				Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Error al capturar la foto&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;LENGTH_LONG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
			&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;permisos-de-android&#34;&gt;Permisos de Android&lt;/h2&gt;

&lt;p&gt;A la hora de manejar el hardware se debe de pedir ciertos permisos como son el escribir y leer en la memoria externa, así como usar la cámara, para esto se usa la etiqueta &lt;code&gt;&amp;lt;uses-permission&amp;gt;&lt;/code&gt; donde se coloca que permiso es solicitado.
&lt;code&gt;&amp;lt;uses-feature android:name=&amp;quot;android.hardware.camera&amp;quot; android:required=&amp;quot;true&amp;quot; /&amp;gt;&lt;/code&gt;
&lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WRITE_EXTERNAL_STORAGE&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;imports-default-groovy&#34;&gt;Imports default groovy&lt;/h2&gt;

&lt;p&gt;Groovy realiza el import de los paquetes más usados, para reducir el código.
&lt;code&gt;import java.lang.*&lt;/code&gt;
&lt;code&gt;import java.util.*&lt;/code&gt;
&lt;code&gt;import java.io.*&lt;/code&gt;
&lt;code&gt;import java.net.*&lt;/code&gt;
&lt;code&gt;import groovy.lang.*&lt;/code&gt;
&lt;code&gt;import groovy.util.*&lt;/code&gt;
&lt;code&gt;import java.math.BigInteger&lt;/code&gt;
&lt;code&gt;import java.math.BigDecimal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pueden encontrar el código completo &lt;a href=&#34;https://github.com/reyes271292/camera_android&#34;&gt;&lt;em&gt;aquí&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making Android con Groovy(otra vez)</title>
      <link>http://blog.makingdevs.com/2016/07/19/making-android-con-groovyotra-vez</link>
      <pubDate>Tue, 19 Jul 2016 19:12:30 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/07/19/making-android-con-groovyotra-vez</guid>
      <description>

&lt;p&gt;En las vísperas de la fecha en la que escribo este post, habíamos decidido entrar más de lleno con Android dentro del equipo de desarrollo, sin embargo, la convicción fue como siempre hacerlo de forma diferente, o por lo menos algo diferente con respecto a una industria que parecía siempre hacer lo mismo con lo mismo.&lt;/p&gt;

&lt;p&gt;Es por ello que me gustaría escribirles al respecto de la experiencia que tuvimos usando Groovy en un proyecto Android, sé de antemano que la atención y los reflectores se encuentran en otros lenguajes, sin embargo, a nosotros nos ayudo muchísimo la  la experiencia que teníamos con el lenguaje pero usándolo en otro contexto muy distinto, y aunque no escribiremos todo lo que hicimos en este post, si les comentaremos en algunos más que fue lo que hicimos y como nos beneficiamos.&lt;/p&gt;

&lt;p&gt;Explicarles como agregamos el plugin de Groovy dentro de un proyecto Android está de más, pueden consultarlo directamente en su &lt;a href=&#34;https://github.com/groovy/groovy-android-gradle-plugin&#34;&gt;repositorio de GitHub&lt;/a&gt;. Lo que me gustaría mencionar es que ya está en una versión estable y confiable como para usarse.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;la-estructura-de-un-proyecto&#34;&gt;La estructura de un proyecto&lt;/h2&gt;

&lt;p&gt;Al igual que un proyecto Android(Java), hay mucha similaridad integrando Groovy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;▾ app/
  ▾ src/
    ▾ main/
      ▾ groovy/com/makingdevs/mybarista/
        ▾ common/
            CamaraUtil.groovy
            ImageUtil.groovy
            LocationUtil.groovy
            SingleFragmentActivity.groovy
            WithFragment.groovy
        ▾ database/
        ▾ model/
          ▸ command/
          ▸ repository/
            Comment.groovy
            GPSLocation.groovy
            S3Asset.groovy
            User.groovy
        ▾ network/
          ▾ impl/
              RetrofitTemplate.groovy
            FoursquareRestOperations.groovy
            S3AssetRestOperations.groovy
            UserRestOperations.groovy
        ▾ service/
            CommentManager.groovy
            CommentManagerImpl.groovy
            FoursquareManager.groovy
            FoursquareManagerImpl.groovy
            S3assetManager.groovy
            S3assetManagerImpl.groovy
        ▾ ui/
          ▾ activity/
              PrincipalActivity.groovy
          ▾ adapter/
              CommentAdapter.groovy
              UserAdapter.groovy
          ▾ fragment/
              CameraFragment.groovy
              CommentsFragment.groovy
        ▾ view/
            CustomFontTextView.groovy
      ▸ res/
    app.iml
    proguard-rules.pro
▾ fastlane/
    Appfile
    Fastfile
  android_app.iml
  Gemfile
  Gemfile.lock
  gradle.properties
  gradlew*
  gradlew.bat
  local.properties
  README.md
  settings.gradle
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;los-modelos&#34;&gt;Los modelos&lt;/h2&gt;

&lt;p&gt;La ventaja de los POGOS de Groovy se siente al declarar o instanciar algún objeto de dominio:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;groovy.transform.CompileStatic&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF&#34;&gt;@CompileStatic&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    String id
    String username
    String token
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora instanciamos nuestra clase en cualquier parte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;User &lt;span style=&#34;color: #00A000&#34;&gt;getUserSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Context context&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    SharedPreferences session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;getSharedPreferences&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;UserSession&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;Context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;MODE_PRIVATE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    String username &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    String token &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    String id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;username:&lt;/span&gt;username&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;token:&lt;/span&gt;token&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;id:&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La nota &lt;strong&gt;importante&lt;/strong&gt; aquí es la forma de la instanciación y que no hay palabra reservada &lt;code&gt;return&lt;/code&gt;, al igual que la declaración del método como &lt;code&gt;public&lt;/code&gt; no es necesaria. Además de que puedes llamar de forma abreviada a sus atributos.&lt;/p&gt;

&lt;h2 id=&#34;staticcompile&#34;&gt;&lt;code&gt;@StaticCompile&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Groovy es un lenguaje de tipado dinámico opcional&lt;/strong&gt;, lo cuál significa que podemos beneficiarnos de ciertos elementos del lenguaje y estar seguros de que compilará correctamente; esta anotación hace al compilador mas estricto, con la ventaja de optimizar el código de byte dando como resultado una mejor ejecución. Los desarrolladores recomiendan el uso intenso de esta anotación en todas las clases dentro del proyecto Android:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;android.content.Context&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;android.content.Intent&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;android.support.v4.app.Fragment&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;com.makingdevs.app.common.SingleFragmentActivity&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;com.makingdevs.app.ui.fragment.RegistrationFragment&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;groovy.transform.CompileStatic&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF&#34;&gt;@CompileStatic&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;RegistrationActivity&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;extends&lt;/span&gt; SingleFragmentActivity&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; Intent &lt;span style=&#34;color: #00A000&#34;&gt;newIntentWithContext&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Context context&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
        Intent intent &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; Intent&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; RegistrationActivity&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        intent
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    Fragment &lt;span style=&#34;color: #00A000&#34;&gt;createFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;RegistrationFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realmente este es un tema que se puede extender un poco más, pero iniciando con esto es suficiente.&lt;/p&gt;

&lt;h2 id=&#34;los-closures&#34;&gt;Los closures&lt;/h2&gt;

&lt;p&gt;Para quién ya ha programado en Groovy conocerá que los closures son un elemento fundamental, para quiénes no, podrán compararlos con las lambdas de Java 8 o simplemente como lo que son: closures.&lt;/p&gt;

&lt;p&gt;La forma general del closure en Groovy es:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; p1&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;p2&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;p3&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; body &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y creo que es de las partes de las que más podemos comentar, incluso creo que cada beneficio particular que nos da Groovy con los closures lo podremos comentar en un post por separado.&lt;/p&gt;

&lt;h3 id=&#34;implementando-interfaces-con-closures&#34;&gt;Implementando interfaces con Closures&lt;/h3&gt;

&lt;p&gt;El evento más solicitado dentro de una app Android es el &lt;em&gt;click&lt;/em&gt; de un componente, con un closure podemos tratarlo:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@CompileStatic&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;SomeFragment&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;extends&lt;/span&gt; Fragment &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    FloatingActionButton mButtonGoChekin

    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// ...more code...&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    View &lt;span style=&#34;color: #00A000&#34;&gt;onCreateView&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;LayoutInflater inflater&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                      &lt;span style=&#34;color: #AA22FF&#34;&gt;@Nullable&lt;/span&gt; ViewGroup container&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #AA22FF&#34;&gt;@Nullable&lt;/span&gt; Bundle savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

        mButtonGoChekin&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;FloatingActionButton&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; root&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;button_go_chekin&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        mButtonGoChekin&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;onClickListener&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            Intent intent &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; AnotherActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;newIntentWithContext&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
            startActivity&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;intent&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora aquí una de las que más me gusta en conjunto con otra anotación de Groovy &lt;code&gt;@Singleton&lt;/code&gt;, de la cual hablaremos en otro post.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Singleton&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF&#34;&gt;@CompileStatic&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;RetrofitTemplate&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    Retrofit retrofit &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; Retrofit&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;addConverterFactory&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;GsonConverterFactory&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;baseUrl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;BuildConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;API_SERVER_URL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;

    &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;withRetrofit&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Class operations&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Closure onSuccess&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Closure onError&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Closure action&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
        CustomRestOperations restOperations &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; retrofit&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;operations&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;as&lt;/span&gt; CustomRestOperations
        Call&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Checkin&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; model &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; action&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;restOperations&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;as&lt;/span&gt; Call&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Checkin&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;def&lt;/span&gt; callback &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;
                onResponse &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;onSuccess&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                onFailure &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; onError
        &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
        model&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;enqueue&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;callback &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;as&lt;/span&gt; Callback&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Checkin&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Podemos hacer que un mapa se comporte como la implementación de una interfaz&lt;/strong&gt;, es sólo cuestión de usar los closures correctamente. Y también podemos ejecutar closures para mandarles parámetros listos para usarse en otros contextos.&lt;/p&gt;

&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Si bien, Groovy agrega peso a las aplicaciones Android, creo que cada byte y cada línea vale todo lo que no tuvimos que codificar, la fluidez en el teclado y la productividad ganada.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Uso de logback</title>
      <link>http://blog.makingdevs.com/2016/03/28/uso-de-logback</link>
      <pubDate>Mon, 28 Mar 2016 09:13:56 -0600</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/03/28/uso-de-logback</guid>
      <description>

&lt;p&gt;En el proceso de desarrollo de software se implementan bitácoras o mejor conocidas como &lt;em&gt;loggers&lt;/em&gt; que permiten tener información de salida útil al desarrollador en cuanto al correcto flujo de la aplicación.&lt;/p&gt;

&lt;p&gt;Este registro se divide en secciones: Logger, Formatter y Handler.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Logger&lt;/em&gt;: Es el responsable de captar el mensaje y pasarlo al marco de registro.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Formatter&lt;/em&gt;: Su función es dar formato a la salida. toma el objeto binario y realiza la conversión a una representación de cadena&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Appender&lt;/em&gt; o &lt;em&gt;Handler&lt;/em&gt;: Se le entrega el mensaje con formato al Appender, el cual puede ser visualizado en diferentes formas como son: consola, archivo, base de datos, servicios de mensajería, escribir en un socket.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existen ciertos niveles de logger para diferenciar el tipo de salida que queremos generar:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Nivel&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Descripción&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FATAL&lt;/td&gt;
&lt;td&gt;Errores graves que causan la terminación prematura&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;Otros errores de ejecución o condiciones inesperadas&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WARNING&lt;/td&gt;
&lt;td&gt;Se utiliza para situaciones que podrían ser potencialmente dañinas&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;INFO&lt;/td&gt;
&lt;td&gt;Eventos interesantes de tiempo de ejecución (inicio / apagado)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DEBUG&lt;/td&gt;
&lt;td&gt;Información detallada sobre el flujo a través del sistema&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TRACE&lt;/td&gt;
&lt;td&gt;Información más detallada&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#Logback
Este logger pretende ser el sucesor de log4j, fue diseñado por Ceki Gülcü, fundador de log4j&amp;rsquo;s.
Para poder usar este logger, se requiere del módulo logback.
Una configuración del archivo gradle queda de la siguiente manera:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;apply &lt;span style=&#34;color: #A0A000&#34;&gt;plugin:&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;groovy&amp;#39;&lt;/span&gt;

repositories&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  jcenter&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

dependencies&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  compile &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;org.codehaus.groovy:groovy-all:2.4.4&amp;#39;&lt;/span&gt;
  compile &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;ch.qos.logback:logback-classic:1.1.6&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El archivo groovy que se estará manejando para obtener la bitácora será &lt;em&gt;logback.groovy&lt;/em&gt; el cual contiene el patrón de salida del logger además de especificar donde se mostrara dicha información.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;static&lt;/span&gt; ch&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;qos&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;logback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;classic&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;Level&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;INFO&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;static&lt;/span&gt; ch&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;qos&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;logback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;classic&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;Level&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;DEBUG&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ch.qos.logback.classic.encoder.PatternLayoutEncoder&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ch.qos.logback.core.ConsoleAppender&lt;/span&gt;

&lt;span style=&#34;color: #00A000&#34;&gt;appender&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;CONSOLE&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ConsoleAppender&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  encoder&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;PatternLayoutEncoder&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    pattern &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;%d{HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{15}) - %msg %n&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

appender&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;FILE&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; FileAppender&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  file &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;example_logger.log&amp;quot;&lt;/span&gt;
  append &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;true&lt;/span&gt;
  encoder&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;PatternLayoutEncoder&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    pattern &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;%d{HH:mm:ss.SSS} %-5level %logger{30} %msg %n&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
root&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;DEBUG&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;CONSOLE&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;FILE&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora el archivo se crea una instancia de la clase Logger. Además de contar con el nivel del logger, respetando la configuración que se hizo en el archivo logback.groovy.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.slf4j.Logger&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.slf4j.LoggerFactory&lt;/span&gt;

Logger log &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; LoggerFactory&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;getLogger&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getClass&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;

log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;debug&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*40&lt;/span&gt;
log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;debug&lt;/span&gt; request&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;properties&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Error&amp;quot;&lt;/span&gt;
log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;warn&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Warning&amp;quot;&lt;/span&gt;
log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;info&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Info&amp;quot;&lt;/span&gt;
log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;trace&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Trace&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Un ejemplo de como se vería:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.makingdevs.com/images/logback.png&#34; alt=&#34;logback&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;acerca-del-patrón-de-salida&#34;&gt;Acerca del patrón de salida&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%d{HH:mm:ss.SSS}&lt;/code&gt; Es la hora que se realizo el proceso&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[%thread]&lt;/code&gt; Indica el thread que inicio la tarea&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%highlight(%-5level)&lt;/code&gt; Brinda el color acorde al nivel de logger que se esta usando&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%cyan(%logger{15})&lt;/code&gt; Muestra el nombre de la clase que esta tomando el logger, en color azul&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%msg&lt;/code&gt; Muestra el msn que se manda acorde al nivel que se esta llamando&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%n&lt;/code&gt; Indica el final de la línea&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pueden encontrar el código de ejemplo &lt;a href=&#34;https://github.com/reyes271292/logger_logback&#34;&gt;&lt;em&gt;aquí&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add complete bootstrap to Phoenix</title>
      <link>http://blog.makingdevs.com/2016/03/24/add-complete-bootstrap-to-phoenix</link>
      <pubDate>Thu, 24 Mar 2016 20:08:09 -0600</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/03/24/add-complete-bootstrap-to-phoenix</guid>
      <description>&lt;p&gt;It has been a while since I make a post and this is my first post in English so be gentle with me :P&lt;/p&gt;

&lt;p&gt;Since a couple of months I been working in a language called &lt;a href=&#34;http://elixir-lang.org/&#34;&gt;elixir&lt;/a&gt; and with his web framework &lt;a href=&#34;http://www.phoenixframework.org/&#34;&gt;phoenix&lt;/a&gt;, I have had a lot of fun with these elements. But sometimes I been struggling with configurations that should be easy maybe I don&amp;rsquo;t read that carefully or maybe I&amp;rsquo;m a knucklehead, but whatever the reasone is, I hope this configuration works for you and give you a little help of how configure your Javascripts third parties for your Phoenix application.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;When you create a new application with phoenix you will notice (when you start the server) that actually &lt;code&gt;phoenix&lt;/code&gt; have &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;bootstrap&lt;/a&gt; but that is not true at all, if you want to add a &lt;code&gt;dropdown&lt;/code&gt; or something more sophisticated like a &lt;code&gt;dialog&lt;/code&gt; or a &lt;code&gt;carousel&lt;/code&gt; you will find that there is no &lt;code&gt;javascript&lt;/code&gt; and the only thing that you have is the &lt;code&gt;stylesheet&lt;/code&gt; so in order to add the complete &lt;code&gt;bootstrap&lt;/code&gt; you need a couple steps before.&lt;/p&gt;

&lt;p&gt;Well let&amp;rsquo;s get started with this thing:&lt;/p&gt;

&lt;p&gt;In order to manage all the libraries that you need to work with it is recommended to install &lt;a href=&#34;http://bower.io/&#34;&gt;bower&lt;/a&gt;. Actually &lt;code&gt;phoenix&lt;/code&gt; in his &lt;a href=&#34;http://www.phoenixframework.org/docs/static-assets&#34;&gt;Static Assets&lt;/a&gt; page encourage you to do it.&lt;/p&gt;

&lt;p&gt;So we are going to follow this path and add bootstrap with &lt;code&gt;bower&lt;/code&gt; but first we are going to create the &lt;code&gt;bower.json&lt;/code&gt; file for storing our dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bower init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we are going to create a file named &lt;code&gt;.bowerrc&lt;/code&gt; with this file we are going to tell to &lt;code&gt;bower&lt;/code&gt; where are going to need to put all the &lt;code&gt;javascripts&lt;/code&gt; that we need it from now on. In this file we are going to put the next instruction:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;directory&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;web/static/vendor&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now is the time to install &lt;code&gt;bootstrap&lt;/code&gt; and for that we need to run the following instruction in your shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bower install -S bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have &lt;code&gt;bootstrap&lt;/code&gt; if you check your &lt;code&gt;vendor&lt;/code&gt; directory you will see that there is not only &lt;code&gt;bootstrap&lt;/code&gt;, it is also &lt;code&gt;jquery&lt;/code&gt; (because is a dependency for &lt;code&gt;bootstrap&lt;/code&gt;), if have not heard of &lt;code&gt;bower&lt;/code&gt; before I recommend you to look for other proyects it will save you a lot of time and space in your repository.&lt;/p&gt;

&lt;p&gt;Well at this moment, if you run your &lt;code&gt;phoenix.server&lt;/code&gt; you will find a couple of errors, so lets fix that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let&amp;rsquo;s remove the &lt;code&gt;bootstrap css&lt;/code&gt; that &lt;code&gt;phoenix&lt;/code&gt; ships with. For this open your &lt;code&gt;web/static/css/app.css&lt;/code&gt; and remove the first 6 lines of code of the file.&lt;/li&gt;
&lt;li&gt;Then open your &lt;code&gt;brunch-config.js&lt;/code&gt; and in the &lt;code&gt;conventions&lt;/code&gt; section add the following:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;   conventions&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
     assets&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BB6688&#34;&gt;/^(web\/static\/assets)/&lt;/span&gt;,
     ignored&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; [
       &lt;span style=&#34;color: #BB6688&#34;&gt;/^(web\/static\/vendor\/bootstrap\/)(?!.*min.(js|css)$)/&lt;/span&gt;,
       &lt;span style=&#34;color: #BB6688&#34;&gt;/^(web\/static\/vendor\/jquery\/)(?!.*min.js)/&lt;/span&gt;
     ]
   }
   
&lt;/pre&gt;&lt;/div&gt;

3. After that you will need to load &lt;code&gt;jquery&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt; in order, i.e. First &lt;code&gt;jquery&lt;/code&gt; and then &lt;code&gt;bootstrap&lt;/code&gt;. This is because &lt;code&gt;brunch&lt;/code&gt; will merge all js in alphabetical order and we require that &lt;code&gt;jquery&lt;/code&gt; loads first. For this we move to the &lt;code&gt;joinTo&lt;/code&gt; in the &lt;code&gt;files&lt;/code&gt; section and add the next lines:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;   files&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
     javascripts&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
       joinTo&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;js/app.js&amp;quot;&lt;/span&gt;,
       order&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
         before&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; [
           &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;web/static/vendor/jquery/dist/jquery.min.js&amp;quot;&lt;/span&gt;,
           &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;web/static/vendor/bootstrap/dist/js/bootstrap.js&amp;quot;&lt;/span&gt;
         ]
       }
     },
   ... more code ...
   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this you can open the main layout of your application and put the next code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdown&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;btn btn-default dropdown-toggle&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdownMenu1&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;data-toggle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdown&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;aria-haspopup&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;aria-expanded&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&amp;gt;
    Dropdown
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;caret&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;span&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;button&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdown-menu&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;aria-labelledby&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;dropdownMenu1&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&amp;gt;Action&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&amp;gt;Another action&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&amp;gt;Something else here&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;separator&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;divider&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&amp;gt;Separated link&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;li&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;ul&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this is going to work as expected. Now you can make use of everything that &lt;code&gt;boostrap&lt;/code&gt; have.&lt;/p&gt;

&lt;p&gt;Oh! I forgot for copying the fonts and icons that &lt;code&gt;bootstrap&lt;/code&gt; have you need to use a tool called &lt;code&gt;assetsmanager-brunch&lt;/code&gt; this is for manage assets that are not minify or uglify like images or fonts. For this we need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;assetsmanager-brunch&lt;/code&gt; with &lt;code&gt;npm&lt;/code&gt; help. Run the following &lt;code&gt;npm install --save assetsmanager-brunch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then in the &lt;code&gt;plugins&lt;/code&gt; section add the following code:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;   assetsmanager&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
       copyTo&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
         &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;web/static/vendor/bootstrap/dist/fonts&amp;#39;&lt;/span&gt;]
       }
   }
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all folks! At least for this post I hope you enjoy and Good Luck, Have Fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MicroServicios con Groovy</title>
      <link>http://blog.makingdevs.com/2016/03/08/microservicios-con-groovy</link>
      <pubDate>Tue, 08 Mar 2016 21:38:08 -0600</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/03/08/microservicios-con-groovy</guid>
      <description>&lt;p&gt;Si bien, existen muchas tecnologías muy completas que permiten la creación de servicios robustos, a veces me he visto en la necesidad de hacer algo pequeño. muy concreto pero mantenible, y que pueda soportar un volumen determinado. Es por esto que me he apoyado del poder que ofrece Groovy con ayuda de los &lt;a href=&#34;http://docs.groovy-lang.org/latest/html/api/groovy/servlet/GroovyServlet.html&#34;&gt;Groovlets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La parte que me gusta de este acercamiento es que el poder del Scripting se pasa al navegador, o en este caso, a un cliente que consume algún servicio web. Cuando usamos &lt;em&gt;Groovlets&lt;/em&gt; tenemos disponible lo sisguiente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;request&lt;/em&gt; - &lt;code&gt;HttpServletRequest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;response&lt;/em&gt; - &lt;code&gt;HttpServletResponse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;application&lt;/em&gt; - &lt;code&gt;ServletContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;session&lt;/em&gt; - &lt;code&gt;HttpSession&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;out&lt;/em&gt; - &lt;code&gt;PrintWriter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;headers&lt;/em&gt; - &lt;code&gt;Header[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;params&lt;/em&gt; - Un objeto tipo &lt;code&gt;Map&lt;/code&gt; que contiene los parámetros&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;p&gt;Ahora bien, que la configuración XML si es el caso es muy sencilla y sólo tenemos que agregar el Servlet de Groovy y hacer el mapeo.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;Groovy&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;groovy.servlet.GroovyServlet&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;Groovy&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;*.groovy&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;*.gdo&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Nota: Que el mapeo no necesariamente es estricto con la extensión, podemos usar la que querramos.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Y aunque la implementación que muestro no sería la más &lt;em&gt;adecuada&lt;/em&gt;, sirve de ejemplo para mostrar en pocas líneas la mayoría de los elementos antes mencionado:&lt;/p&gt;

&lt;p&gt;Me apoyo de un par de clases que &lt;em&gt;modelan&lt;/em&gt; un almacén de datos.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;todos&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;groovy&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Todo&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  String description
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF&#34;&gt;@Singleton&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Only one instance&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;TodoManager&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Todo&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; todos &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos jugar con el reponse directamente para decirle que cualquier respuesta sería JSON:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;todos&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;groovy&lt;/span&gt;
response&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;contentType&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Buscar algún encabezado en particular para validar nuestra solicitud:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;todos&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;groovy&lt;/span&gt;
&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;def&lt;/span&gt; contentType &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; headers&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;find&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; k&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;v &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; k&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;toLowerCase&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}?.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;value&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;contentType &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
  response&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; HttpServletResponse&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;SC_BAD_REQUEST&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// We return a status code 400&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Using the json method included&lt;/span&gt;
  json&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;status:&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Please use &amp;#39;application/json&amp;#39; header, just received ${headers} instead&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// And nothing more...&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí podemos jugar con el método de envío y hacer algunas acciones, aquí una muestra muy simple:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;todos&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;groovy&lt;/span&gt;
&lt;span style=&#34;color: #00A000&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;toLowerCase&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()){&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Validating the method&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
    json&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;todos:&lt;/span&gt;TodoManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;instance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;todos&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Using the instance&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;break&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
    Todo todo &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; Todo&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;description:&lt;/span&gt;params&lt;span style=&#34;color: #666666&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;todo&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;?:&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;No description&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    TodoManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;instance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;todos&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; todo
    response&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; HttpServletResponse&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;SC_CREATED&lt;/span&gt;
    json&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;todo:&lt;/span&gt;todo&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;break&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
    response&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; HttpServletResponse&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;SC_BAD_REQUEST&lt;/span&gt;
    json&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;status:&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Method &amp;#39;${request.method.toLowerCase()}&amp;#39; not supported&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Puedes incluir estos tres últimos fragmentos en un archivo y todo funcionará sin problemas. Aunque, nuevamente no es la forma más adecuada, muestra muy bien el potencial del simple uso del Groovlet.&lt;/p&gt;

&lt;p&gt;Al final podrías usar &lt;code&gt;@Grab&lt;/code&gt; para obtener las dependencias de &lt;em&gt;Jetty&lt;/em&gt; y levantar el contenedor en el mismo archivo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusión&lt;/strong&gt;: En un par de líneas puedes conseguir un servicio pequeño, entendible y listo para pasarse a un proyecto de Gradle que permita estructurarlo mejor para irle creciendo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pruebas funcionales con Geb y Spock</title>
      <link>http://blog.makingdevs.com/2016/03/07/pruebas-funcionales-con-geb-y-spock</link>
      <pubDate>Mon, 07 Mar 2016 23:47:26 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/03/07/pruebas-funcionales-con-geb-y-spock</guid>
      <description>

&lt;p&gt;Las pruebas funcionales se utilizan para verificar que los flujos de una aplicación que se definen en los casos de uso o historias de usuario funcionen correctamente; son pruebas difíciles de implementar ya que deben realizarse desde la perspectiva del usuario y muchas veces las interfaces de usuario cambian constantemente.&lt;/p&gt;

&lt;p&gt;Geb es una herramienta para escribir pruebas funcionales con Groovy que hace uso del &lt;a href=&#34;http://www.seleniumhq.org/projects/webdriver/&#34;&gt;&lt;em&gt;WebDriver de Selenium&lt;/em&gt;&lt;/a&gt; para la automatizacion del navegador y toma varias ideas de la biblioteca jQuery para la interacción con los elementos. Utiliza el patrón de diseño &lt;a href=&#34;http://martinfowler.com/bliki/PageObject.html&#34;&gt;&lt;em&gt;Page Object&lt;/em&gt;&lt;/a&gt; para mapear los elementos de las páginas en clases que representan cada una de las vistas.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;configuración-de-gradle&#34;&gt;CONFIGURACIÓN DE GRADLE&lt;/h2&gt;

&lt;p&gt;A continuación se muestra la implementación de una prueba funcional integrando Geb con el framework de pruebas Spock.&lt;/p&gt;

&lt;p&gt;El primer paso es obtener las dependencias de Geb,Spock y el Selenium Driver para los diferentes navegadores. Para este ejemplo voy a utilizar Gradle para la ejecución de las pruebas y la administración de las dependencias.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;build&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;gradle&lt;/span&gt;
apply &lt;span style=&#34;color: #A0A000&#34;&gt;plugin:&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;groovy&amp;quot;&lt;/span&gt;

repositories&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  jcenter&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

ext&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  drivers &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;chrome&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
  groovyVersion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;2.4.4&amp;quot;&lt;/span&gt;
  spockGroovyVersion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;2.4&amp;quot;&lt;/span&gt;
  gebVersion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;0.12.1&amp;quot;&lt;/span&gt;
  seleniumVersion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;2.44.0&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

dependencies&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  testCompile &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;org.codehaus.groovy:groovy-all:${groovyVersion}&amp;quot;&lt;/span&gt;
  testCompile &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;org.gebish:geb-spock:${gebVersion}&lt;/span&gt;
&lt;span style=&#34;color: #BB4444&#34;&gt;  testCompile &amp;quot;&lt;/span&gt;org&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;spockframework&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;spock&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;core:&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;1.0-&lt;/span&gt;groovy&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;$&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;spockGroovyVersion&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #BB4444&#34;&gt;  drivers.each{ driver -&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BB4444&#34;&gt;    testCompile &amp;quot;&lt;/span&gt;org&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;seleniumhq&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;selenium&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;selenium&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;$&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;driver&lt;span style=&#34;color: #666666&#34;&gt;}-&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;driver:&lt;/span&gt;$&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;seleniumVersion&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez que se definen las dependencias necesarias se crean las tareas para la ejecución de las pruebas en cada navegador que compone la lista.
Geb permite realizar capturas de pantalla en cualquier punto del flujo de la aplicación que se está probando; para especificar el directorio donde se encontrarán estas imagenes se agrega la propiedad &amp;ldquo;geb.build.reportsDir&amp;rdquo; a las propiedades del sistema.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;drivers&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; driver &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;
  task &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;${driver}Test&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;type:&lt;/span&gt;Test&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
    reports&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      html&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;destination&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; reporting&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;$name/tests&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    outputs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;upToDateWhen&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    systemProperty &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;geb.build.reportsDir&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;reporting&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;$name/geb&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    systemProperty &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;geb.env&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; driver
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que la automatización del navegador sea posible con Chrome es necesario descargar la versión más reciente del &lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/downloads&#34;&gt;&lt;em&gt;WebDriver para Chrome&lt;/em&gt;&lt;/a&gt; y definir en la propiedad del sistema el valor del directorio donde se encuentra.
Finalmente se sobreescribe la tarea de test para que dependa de las creadas anteriormente y todas las pruebas se ejecuten al ejecutar el comando &lt;code&gt;gradle test&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;chromeTest&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  systemProperty &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;webdriver.chrome.driver&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;${System.properties[&amp;quot;&lt;/span&gt;user&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;home&amp;quot;]}/.grails/chromedriver&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

test&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  dependsOn drivers&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; driver &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; tasks&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;${driver}Test&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  enabled &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;configuración-de-geb&#34;&gt;CONFIGURACIÓN DE GEB&lt;/h2&gt;

&lt;p&gt;Antes de comenzar a escribir las pruebas es necesario crear el archivo de configuración de Geb.
Aquí se crean las instancias del driver para Chrome y Firefox.&lt;/p&gt;

&lt;p&gt;El método &lt;strong&gt;waiting&lt;/strong&gt; es útil en aplicaciones que utilizan AJAX ya que espera por un elemento el tiempo definido en la configuración, en este caso el tiempo será de 2 segundos.&lt;/p&gt;

&lt;p&gt;La propiedad &lt;strong&gt;baseUrl&lt;/strong&gt; indíca la dirección de la aplicación que será probada, para este ejemplo se probará un flujo del sitio de MakingDevs.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;GebConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;groovy&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.openqa.selenium.chrome.ChromeDriver&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.openqa.selenium.firefox.FirefoxDriver&lt;/span&gt;

waiting&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  timeout &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

environments&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  chrome&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    driver &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;def&lt;/span&gt; driverInstance &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; ChromeDriver&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
      driverInstance&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;manage&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;maximize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
      driverInstance
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  firefox&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    driver &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;def&lt;/span&gt; driverInstance &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; FirefoxDriver&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
      driverInstance&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;manage&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;maximize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
      driverInstance
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

baseUrl &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;http://makingdevs.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;page-objects&#34;&gt;PAGE OBJECTS&lt;/h2&gt;

&lt;p&gt;Como se mencionó anteriormente, para la interacción con los elementos del sitio se deben crear clases que representen cada página de la aplicación. Estas clases se deben extender de la clase &lt;strong&gt;Page&lt;/strong&gt; y en ellas deben mapearse los componentes con los que se va a interactuar dentro del closure estático &lt;strong&gt;content&lt;/strong&gt;; los componentes pueden ser referenciados haciendo uso de los selectores que proporciona Geb y que son muy parecidos a los de la biblioteca jQuery.&lt;/p&gt;

&lt;p&gt;Dentro de cada clase Page puede declararse la propiedad estática &lt;strong&gt;url&lt;/strong&gt; para que el navegador apunte a esa página cuando el método &lt;strong&gt;to()&lt;/strong&gt; sea utilizado.&lt;/p&gt;

&lt;p&gt;El closure estático &lt;strong&gt;at&lt;/strong&gt; ayuda a determinar si el navegador se encuentra actualmente en esa página al comprobar que un elemento de la página cumpla con una condición.&lt;/p&gt;

&lt;p&gt;Vamos a probar un flujo sencillo, en el cual el usuario consulta la información de un curso, para ello se necesitarán tres clases, MakingDevsHomePage, MakingDevsCoursesPage y MakingDevsCourseInfoPage:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;package&lt;/span&gt; com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;makingdevs&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;geb.*&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;MakingDevsHomePage&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;extends&lt;/span&gt; Page&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; at &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; title &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;. : MakingDevs - Welcome : .&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; content &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    coursesButton&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;to:&lt;/span&gt; MakingDevsCoursesPage&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt; $&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;ul.nav a&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,1)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;package&lt;/span&gt; com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;makingdevs&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;geb.*&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;MakingDevsCoursesPage&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;extends&lt;/span&gt; Page&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; url &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;/training&amp;quot;&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; at &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    waitFor&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; $&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;.section-main-header&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    $&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;.section-main-header&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Nuestro entrenamiento&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; content &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    groovyCoursesDiv&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; $&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;.span7&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,2).&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;children&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;ul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;package&lt;/span&gt; com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;makingdevs&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;pages&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;geb.*&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;CourseInfoPage&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;extends&lt;/span&gt; Page&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; at &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; waitFor&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; $&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;i.icon-terminal&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; content &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    postTitle&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; $&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;.post-title&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;integración-con-spock&#34;&gt;INTEGRACIÓN CON SPOCK&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://spockframework.github.io/spock/docs/1.0/introduction.html&#34;&gt;&lt;em&gt;Spock&lt;/em&gt;&lt;/a&gt; es un framework de pruebas y especificación que se caracteriza por su formato &lt;em&gt;Given-When-Then&lt;/em&gt; que hace las pruebas más descriptivas.&lt;/p&gt;

&lt;p&gt;Al integrar Geb con Spock es posible definir que acciones que deben ocurrir al ejecutar la prueba funcional. Por ejemplo, en la primera prueba escrita en la siguiente clase se utiliza el método &lt;strong&gt;to&lt;/strong&gt; dentro del bloque &lt;em&gt;when&lt;/em&gt; para que el navegador se dirija a la página principal del sitio, una vez ahí se da click a un vínculo y finalmente se verifica que ese vínculo lleve a la página que muestra los cursos.&lt;/p&gt;

&lt;p&gt;La segunda prueba muestra algo más interesante, ya que implementa un &lt;strong&gt;Data Table&lt;/strong&gt; de Spock para agrupar un conjunto de valores de entrada y salida separados por el símbolo &lt;strong&gt;|&lt;/strong&gt;; la prueba verifica que al ir a la url declarada en MakingDevsCoursesPage se busque con el método &lt;em&gt;find&lt;/em&gt; dentro de una sección referenciada por el selector groovyCoursesDiv el vínculo con un atributo href que comience con el valor declarado en la columna &lt;em&gt;_selectorUrl&lt;/em&gt; de la tabla para después hacer click en el elemento y finalmente comparar el texto del componente asociado al selector de postTitle con el del valor en la columna &lt;em&gt;_postTitle&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;package&lt;/span&gt; com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;makingdevs&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;geb.spock.GebReportingSpec&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;java.lang.Void&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;as&lt;/span&gt; Should
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;com.makingdevs.pages.*&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;MakingDevsSiteFunctionalSpec&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;extends&lt;/span&gt; GebReportingSpec&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  Should &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;show the available courses&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #A0A000&#34;&gt;when:&lt;/span&gt;
      to MakingDevsHomePage
    &lt;span style=&#34;color: #A0A000&#34;&gt;and:&lt;/span&gt;
      coursesButton&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;click&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;

    &lt;span style=&#34;color: #A0A000&#34;&gt;then:&lt;/span&gt;
      at MakingDevsCoursesPage
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  Should &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;show the course information&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #A0A000&#34;&gt;when:&lt;/span&gt;
      to MakingDevsCoursesPage
    &lt;span style=&#34;color: #A0A000&#34;&gt;and:&lt;/span&gt;
      groovyCoursesDiv&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;a[href^=&amp;#39;${_selectorUrl}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;click&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;

    &lt;span style=&#34;color: #A0A000&#34;&gt;then:&lt;/span&gt;
      at CourseInfoPage
      postTitle&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; _postTitle
    &lt;span style=&#34;color: #A0A000&#34;&gt;where:&lt;/span&gt;
    _selectorUrl                    &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; _postTitle
    &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;/training/groovy-testing&amp;quot;&lt;/span&gt;      &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Pruebas en la JVM con Groovy&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;/training/groovy-essentials&amp;quot;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;El lenguaje dinámico Groovy&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;/training/grails-intermediate&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Productividad con Grails&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;/training/groovy-intermediate&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Productividad con Groovy&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente para correr las pruebas ejecutamos el comando &lt;code&gt;./gradlew firefoxTest&lt;/code&gt; para Firefox o &lt;code&gt;./gradlew chromeTest&lt;/code&gt; para chrome; la tarea &lt;code&gt;./gradlew test&lt;/code&gt; corre las pruebas en ambos navegadores.&lt;/p&gt;

&lt;p&gt;Pueden encontrar el código completo &lt;a href=&#34;https://github.com/egjimenezg/FunctionalTesting&#34;&gt;&lt;em&gt;aquí&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bitacorado de pruebas en Gradle</title>
      <link>http://blog.makingdevs.com/2016/01/22/bitacorado-de-pruebas-en-gradle</link>
      <pubDate>Fri, 22 Jan 2016 18:14:37 -0600</pubDate>
      
      <guid>http://blog.makingdevs.com/2016/01/22/bitacorado-de-pruebas-en-gradle</guid>
      <description>&lt;p&gt;Hace tiempo al correr unas pruebas con un proyecto de gradle tuve la necesidad de saber el orden y la forma en que se estaban corriendo ciertas pruebas, gradle arroja este resultado al final de la ejecución, sin embargo yo quería un bitacorado al momento de la ejecución, para lo cual buscando en la documentación me encontre con el &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html&#34;&gt;TestLoggingContainer&lt;/a&gt;, del cual pude obtener este fragmento:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;apply plugin&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;&amp;#39;&lt;/span&gt;java&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;&amp;#39;&lt;/span&gt;

test &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  testLogging &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// set options for log level LIFECYCLE&lt;/span&gt;
    events &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;
      exceptionFormat &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;short&amp;quot;&lt;/span&gt;

      &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// set options for log level DEBUG&lt;/span&gt;
      debug &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        events &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;started&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;skipped&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;
          exceptionFormat &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;full&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// remove standard output/error logging from --info builds&lt;/span&gt;
    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// by assigning only &amp;#39;failed&amp;#39; and &amp;#39;skipped&amp;#39; events&lt;/span&gt;
    info&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;events&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;skipped&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En donde pongo todo los tipos de eventos del proyecto que son &lt;code&gt;events &amp;quot;started&amp;quot;, &amp;quot;passed&amp;quot;, &amp;quot;skipped&amp;quot;, &amp;quot;failed&amp;quot;&lt;/code&gt; y con ello obtengo una salida como la siguiente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.makingdevs.com/images/test_logging.png&#34; alt=&#34;Screenshot 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Muy útil cuando no queremos hacer bitácora manual de que pruebas se están corriendo, Gradle ya cuenta con ella.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amazon S3 y Groovy</title>
      <link>http://blog.makingdevs.com/2015/08/13/amazon-s3-y-groovy</link>
      <pubDate>Thu, 13 Aug 2015 22:47:08 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2015/08/13/amazon-s3-y-groovy</guid>
      <description>&lt;p&gt;En una de las tareas que realice recientemente, tuve la necesidad de transferir un par de archivos que obtuve de un endpoint(de la cual hablaré en otro post) hacia un Bucket de Amazon S3.&lt;/p&gt;

&lt;p&gt;La solución inmediata fue usar una biblioteca que encontré para Java de nombre &lt;a href=&#34;http://www.jets3t.org/&#34;&gt;jets3t&lt;/a&gt;, la cual, provee de un conjunto de herramientas muy simple para operar con Amazon S3, Cloud Front y Google Storage.&lt;/p&gt;

&lt;p&gt;El caso muy puntual que tuve que resolver fue subir un archivo y despúes borrarlo de un bucket muy particular. En este ejemplo muestro primero como listar todos los buckets disponibles en una cuenta de S3.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Grapes&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Grab&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;group&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;net.java.dev.jets3t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; module&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;jets3t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; version&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;0.9.3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.jets3t.service.security.*&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.jets3t.service.*&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.jets3t.service.impl.rest.httpclient.*&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.jets3t.service.model.*&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.jets3t.service.acl.*&lt;/span&gt;

String awsAccessKey &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;YOURAWSACCESSKEY&amp;quot;&lt;/span&gt;
String awsSecretKey &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;YOURAWSSECRETKEY&amp;quot;&lt;/span&gt;

AWSCredentials awsCredentials &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; AWSCredentials&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;awsAccessKey&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; awsSecretKey&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
S3Service s3Service &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; RestS3Service&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;awsCredentials&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

S3Bucket&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; myBuckets &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s3Service&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;listAllBuckets&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Despúes, una vez con todos los buckets, podemos listar los archivos contenidos dentro de bucket muy particular.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;String bucletName &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;makingdevs-bucket&amp;quot;&lt;/span&gt;

bucket &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; myBuckets&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;find&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;bucketName &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

s3Objects &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s3Service&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;listObjects&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;bucket&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Finalmente, podemos subir un archivo específico hacia el bucket que deseamos.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;file &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;/some/file/in/your/filesystem.ext&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

S3Object s3Object &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;new&lt;/span&gt; S3Object&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
s3Object&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  setAcl AccessControlList&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;REST_CANNED_PUBLIC_READ&lt;/span&gt;
  setContentLength file&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
  setContentType file&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;toURL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;openConnection&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;contentType&lt;/span&gt;
  setDataInputFile file
  setKey file&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;name&lt;/span&gt;
  setBucketName bucket&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// we use our previous bucket&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

s3Service&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;putObject&lt;/span&gt; bucket&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; s3Object
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez que llamamos al servicio &lt;code&gt;s3Service&lt;/code&gt; el archivo queda colocado en el bucket. Y finalmente si deseamos borrarlo podemos usar &lt;code&gt;s3Service.deleteObject s3Bucket, s3Object.key&lt;/code&gt;, en donde sólo mandamos el objeto del bucket y el &lt;em&gt;key&lt;/em&gt; del objeto que deseamos borrar.&lt;/p&gt;

&lt;p&gt;Finalmente, me gustaría detallar dos líneas que en mi opinión son relevantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La parte de &lt;code&gt;acl AccessControlList.REST_CANNED_PUBLIC_READ&lt;/code&gt;, la cual indica que el archivo que se sube es de acceso público para quién quiera que tenga la URL y sólo el propietario puede modificar, existen otras constantes que dan combinaciones de permisos distintos en &lt;a href=&#34;http://www.jets3t.org/api/org/jets3t/service/acl/AccessControlList.html&#34;&gt;la documentación de JetS3t&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;La línea con &lt;code&gt;contentType file.toURL().openConnection().contentType&lt;/code&gt; que es una forma de obtener el &lt;em&gt;content type&lt;/em&gt; sin la necesidad de una biblioteca adicional, sólo con el uso convencional de las clases Java con las que ya contamos. Les recomiendo tomar cualquier archivo y probar sólo esa línea.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si bien hay más cosas que se pueden hacer, les sugiero se den una vuelta por la documentación de esta biblioteca.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revisión del libro - The Software Craftsman: Professionalism</title>
      <link>http://blog.makingdevs.com/2015/08/02/revisi%C3%B3n-del-libro---the-software-craftsman-professionalism</link>
      <pubDate>Sun, 02 Aug 2015 18:44:42 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2015/08/02/revisi%C3%B3n-del-libro---the-software-craftsman-professionalism</guid>
      <description>&lt;p&gt;Libro que al igual que &lt;a href=&#34;https://pragprog.com/the-pragmatic-programmer&#34; title=&#34;the-pragmatic-programmer&#34;&gt;&lt;em&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/em&gt;&lt;/a&gt; se ganó estar en mis libros de cabecera, y se ha ganado un lugar muy especial en mi librero.&lt;/p&gt;

&lt;p&gt;El escritor, y desarrollador de toda la vida &lt;a href=&#34;https://twitter.com/sandromancuso&#34; title=&#34;sandromancuso&#34;&gt;&lt;em&gt;Sandro Mancuso&lt;/em&gt;&lt;/a&gt;, plasma muy bien la idea que el tiene acerca de lo que todo desarrollador de software, y en mi opinión personal lo que debería buscar todo desarrollador, para cambiar su entorno de trabajo y ayudarnos a todos (porque estamos en el mismo barco) a cambiar la mentalidad de los clientes, de que no somos la clase de &lt;em&gt;persona/profesional&lt;/em&gt; que la mayor parte del mundo cree que somos:
&lt;!-- more --&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unos micos tirando lineas de código a diestra y siniestra, y haciendo el código lo más ilegible posible para que nada ni nadie pueda entenderlo&lt;/li&gt;
&lt;li&gt;Unos personajes que se sientan en el cuarto más oscuro del sótano de la empresa y que nadie conoce (usualmente cuentan leyendas de que terror de ellos)&lt;/li&gt;
&lt;li&gt;Los padrinos mágicos de los clientes que hacen que se cumplan sus deseos y que en un parpadear de ojos ya lo tiene funcionando en producción y libre de defectos&lt;/li&gt;
&lt;li&gt;Las personas que arreglan los defectos del sistema con su teclado mágico&lt;/li&gt;
&lt;li&gt;Personas o cosas que transforman café, cerveza o en su defecto bebidas energéticas en líneas de código que pasan por una caja mágica que lo transforma en un sistema para su empresa&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mientras más leía este libro más me iba dando cuenta de que muchas de las cosas que el plasmó las había pasado en algún momento, que otras pocas las estaba pasando y que muchas otras parecían estar a la vuelta de la esquina, como si de un libro de adivinación se tratase.&lt;/p&gt;

&lt;p&gt;Me ayudó a entender la idea de lo que no es un artesano del software y de que para ser uno debes ser más que un desarrollador, que va más allá de incluso herramientas, métodos y metodologías (&lt;em&gt;Agile, Kanban, Lean, XP, TDD,&lt;/em&gt; entre otras) inclusive va mucho más allá de un lenguaje de programación, de un IDE, de un editor de textos o un manipulador de textos.&lt;/p&gt;

&lt;p&gt;Un artesano va más allá de todo esto pero el que vaya más allá no quiere decir que no incluya todo lo anterior, lo más importante para un artesano de software es ser un profesional del software, para ello se basan en muchos principios que van desde ayudar a los desarrolladores a ser mejores en su día a día con técnicas de desarollo tales como TDD, XP, entre otras, pasando por enseñar a como decir que &amp;ldquo;NO&amp;rdquo; a los clientes, como levantar la mano para que nuestra voz sea escuchada, como lidiar con personas que solo ven el desarrollo de software como &amp;ldquo;un trabajo más&amp;rdquo;, que &amp;ldquo;El &lt;em&gt;cómo está hecho&lt;/em&gt; es tan importante como &lt;em&gt;el está hecho&lt;/em&gt;&amp;rdquo; (&lt;em&gt;&amp;ldquo;How it is done is as important as getting it done&amp;rdquo; - Sandro Mancuso, The Software Craftsman: Professionalism, Pragmatism&lt;/em&gt;) que la artesanía del software es un largo camino hacia la maestría, que esto es una mentalidad del desarrollador donde ellos eligen ser responsables de su carrera, constantemente aprendiendo nuevas herramientas, técnicas y constantemente mejorándose.&lt;/p&gt;

&lt;p&gt;Me ayudó a comprender que hace unos años la &amp;ldquo;antigüedad&amp;rdquo; (seniority) se medía en base a cuan ilegible era su código (algo así al a cantidad de WTF por revisión de código), y cuan mal estábamos en hacer eso. Esos tiempos han cambiado y ahora es a la inversa mientras menos WTF por revisión de código existan mejor el código es.&lt;/p&gt;

&lt;p&gt;Entendí también que el código legado a veces no es tan malo como suena, que también ahí existen áreas de oportunidad y que se pueden hacer cosas para ir mejorando poco a poco para que este no sea tan doloroso como todos creemos que es.&lt;/p&gt;

&lt;p&gt;Otra cosa que me ayudó este libro a ver es que un desarrollador en la búsqueda de su maestría es alguien que debe evaluar sus trabajos y empresas en base a sus objetivos y principios, y que cualquier empresa que no esté alineada a sus principios y objetivos debería ser descartada en las fases de las entrevistas. Ya que en las entrevistas no solo el candidato a ser empleado es evaluado, también como buen profesional debemos evaluar a la empresa que nos está entrevistando y cuestionar las cosas que vemos (no ser altaneros o unos patanes, tener el suficiente tacto para hacer las preguntas), desde si quien está entrevistando es RH, hasta si el que está entrevistando es el desarrollador y desde esos inicios se puede ver que tan arraigadas tienen esas jerarquías.&lt;/p&gt;

&lt;p&gt;Y aunque la búsqueda de un nuevo trabajo y/o la permenencia en ese trabajo prácticamente depende de 3 cosas (al menos para el autor): Autonomía, Maestría, Propósito. Y es aquí donde está lo interesante de esta parte ya que deja fuera la parte del &lt;em&gt;Dinero&lt;/em&gt; ya que el conocimiento es más valioso, y no es porque el dinero no lo sea pero el perseguir solamente el dinero te puede desviar de tus objetivos iniciales.&lt;/p&gt;

&lt;p&gt;Y de lo que me di cuenta es que en México estamos del nabo, ya que mientras en muchas empresas alrededor del mundo ya están viendo a los desarrolladores como una parte fundamental de su estructura interna, y que no son los elementos fácilmente reemplazables, aquí siguen viéndonos como los meros micos sentados en una silla frente a una computadora escribiendo código, y mientras esto siga así las empresas mexicanas irán cada día más en picada porque casi ningún buen desarrollador va a querer estar trabajando con ellos. Sin embargo esta mentalidad no es solo culpa de las empresas es también culpa de nosotros como desarrolladores, porque como profesionales debemos decirles lo que está pasando ser honestos y hablar con franquesa ante ellos, como si de su contador se tratara o su abogado o su doctor, nadie confiaría en ellos si les dice que si a todo.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Locura es hacer lo mismo una vez tras otra y esperar resultados diferentes&amp;rdquo; el cambio comienza en nosotros los desarrolladores levantando nuestras manos y cuestionando las decisiones de las personas que se encuentran arriba (hablando de empresas que cuentan con una estructura jerárquica), porque esto no es solo culpa de las empresas también es culpa de nosotros por solo acatar las decisiones de ellos sin decir nada, eso no es ni siquiera es ser profesional, eso es apatía y no es algo que debamos hacer, debemos aprender a decir que &amp;ldquo;NO&amp;rdquo; pero con bases, aportando opciones y si en ese momento no se cuenta con alguna opción decir que en ese momento están escasos de ideas pero que se pensará en algo para traerlo a la mesa y tomar en base a ello las decisiones.&lt;/p&gt;

&lt;p&gt;Por último todo aspirante a ser un Artesano del Software debería tener seguir esto, &lt;a href=&#34;http://manifesto.softwarecraftsmanship.org/&#34; title=&#34;softwarecraftsmanship&#34;&gt;link original&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Como aspirantes a Artesanos del Software estamos elevando el listón de desarrollo de software profesional practicando y ayudando a otros a aprender el oficio. A través de este trabajo hemos llegado a valorar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No sólo software que funciona, &lt;strong&gt;sino también software bien diseñado&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;No sólo responder al cambio, &lt;strong&gt;sino también agregar valor constantemente&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;No sólo individuos e interacciones, &lt;strong&gt;sino también una comunidad de profesionales&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;No sólo colaboración de clientes, &lt;strong&gt;sino también asociaciones productivas&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es decir, en la búsqueda de los elementos de la izquierda, hemos encontrado indispensables los elementos de la derecha.&lt;/p&gt;

&lt;p&gt;Y lo que más me agradó de este libro fue que en realidad pone sobre la mesa lo que un desarrollador debería ser (al menos en el concepto del autor), y contesta la pregunta que estoy seguro a muchos de nosotros como desarrolladores nos han hecho &lt;em&gt;¿Piensas ser un desarollador toda tu vida?&lt;/em&gt; o alguna de sus variantes, y aunque para mí la respuesta es un claro y conciso &amp;ldquo;SI&amp;rdquo; para muchos la respuesta todavía está en el aire.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hot deployment en Gradle</title>
      <link>http://blog.makingdevs.com/2015/07/26/hot-deployment-en-gradle</link>
      <pubDate>Sun, 26 Jul 2015 23:19:13 -0500</pubDate>
      
      <guid>http://blog.makingdevs.com/2015/07/26/hot-deployment-en-gradle</guid>
      <description>&lt;p&gt;Durante un tiempo estuve buscando de la forma de tener una aplicación web con Gradle y tener características como el hot deploy, Grails lo tiene y viendólo de forma interna usa un elemento de nombre &lt;a href=&#34;https://github.com/spring-projects/spring-loaded&#34; title=&#34;springloaded&#34;&gt;SpringLoaded&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Después me di cuenta que frameworks como &lt;a href=&#34;https://github.com/spring-projects/spring-loaded&#34; title=&#34;dropwizard&#34;&gt;Dropwizard&lt;/a&gt; lo usan, y que incluso SpringBoot a través del uso del CLI también, investigando un poco más al respecto y por la necesidad de tenerlo listo para algunos proyectos encontré &lt;a href=&#34;http://www.cholick.com/entry/show/280&#34; title=&#34;tomcat&#34;&gt;un artículo&lt;/a&gt; en donde explica como ponerlo en acción usando propiamente &lt;a href=&#34;https://github.com/spring-projects/spring-loaded&#34; title=&#34;dropwizard&#34;&gt;Dropwizard&lt;/a&gt;. Fue un buen acercamiento, el problema es el siguiente bloque de código en configuración de gradle:
&lt;!-- more --&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;run &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  args &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;app.yaml&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
  jvmArgs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;-javaagent:${new File(&amp;quot;&lt;/span&gt;$buildDir&lt;span style=&#34;color: #BB4444&#34;&gt;/agent/&lt;/span&gt;springloaded&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;$&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;springloadedVersion&lt;span style=&#34;color: #666666&#34;&gt;}.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;jar&amp;quot;).absolutePath}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;-noverify&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En donde, el atributo &lt;code&gt;jvmArgs&lt;/code&gt; es sólo aplicable a tareas del tipo &lt;code&gt;JavaExec&lt;/code&gt;, más específico, que implementan &lt;code&gt;JavaExecSpec&lt;/code&gt; o &lt;code&gt;JavaForkOptions&lt;/code&gt;. Es aquí en donde &lt;a href=&#34;https://github.com/bmuschko/gradle-tomcat-plugin&#34; title=&#34;tomcat&#34;&gt;el plugin de tomcat&lt;/a&gt; que se puede encontrar para Gradle tiene el problema, pues su tarea no lo hace.&lt;/p&gt;

&lt;p&gt;La combinación se haría en conjunto con un plugin de gradle, &lt;a href=&#34;https://github.com/bluepapa32/gradle-watch-plugin&#34; title=&#34;gradle watch&#34;&gt;el watch&lt;/a&gt;, el actúa con cada cambio en la aplicación realizando las tareas que se le digan. Sin embargo, lo que encontré funcionaba para la cmbinación de SpringBooy e IntelliJ Idea, lo cual no veía mal, pero no era mi caso. De cualquier forma pongo disponible la configuración que independiente me sirvió para hacer un hot deploy usando ambos elementos:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;apply &lt;span style=&#34;color: #A0A000&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;groovy&amp;#39;&lt;/span&gt;
apply &lt;span style=&#34;color: #A0A000&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;spring-boot&amp;#39;&lt;/span&gt;
apply &lt;span style=&#34;color: #A0A000&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;com.bluepapa32.watch&amp;#39;&lt;/span&gt;

sourceCompatibility &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.8&lt;/span&gt;
targetCompatibility &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.8&lt;/span&gt;

ext &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  springLoadedVersion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;1.2.1.RELEASE&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

mainClassName&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;com.makingdevs.Application&amp;#39;&lt;/span&gt;

repositories &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  mavenCentral&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
  maven &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    url &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;https://code.lds.org/nexus/content/groups/main-repo&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

dependencies &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  compile&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;org.springframework.boot:spring-boot-starter-web&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  compile &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;org.codehaus.groovy:groovy-all:2.4.3&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

buildscript &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  repositories &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mavenCentral&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
    jcenter&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  dependencies &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    classpath &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;org.springframework.boot:spring-boot-gradle-plugin:1.2.4.RELEASE&amp;quot;&lt;/span&gt;
    classpath &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;org.springframework:springloaded:1.2.0.RELEASE&amp;#39;&lt;/span&gt;
    classpath &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;com.bluepapa32:gradle-watch-plugin:0.1.5&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

jar &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  baseName &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;meerkat-mymapmanager&amp;#39;&lt;/span&gt;
  version &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;0.1.0&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

compileGroovy &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;//enable compilation in a separate daemon process&lt;/span&gt;
  options&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;fork&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

watch &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  groovy &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    files &lt;span style=&#34;color: #00A000&#34;&gt;files&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;src/main/groovy&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    tasks &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;compileGroovy&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Al final del día, lo que encontre fue &lt;a href=&#34;http://akhikhl.github.io/gretty-doc/index.html&#34; title=&#34;gretty&#34;&gt;el plugin de Gretty&lt;/a&gt;, con el que fácilmente podemos usar un contenedor de Tomcat o Jetty y tener disponible el Hot deploy, creo que tiene algunos detalles de rendimiento pero es útil. Finalmente la configuración se reduce mucho y hay varias tareas disponibles, entre ellas &lt;code&gt;appRun&lt;/code&gt;, que es la que levanta el elemento configuraco y lo dijo listo para los cambios:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Using the new mechanism to include plugins&lt;/span&gt;
plugins &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  id &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;groovy&amp;#39;&lt;/span&gt;
  id &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;war&amp;#39;&lt;/span&gt;
  id &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;org.akhikhl.gretty&amp;quot;&lt;/span&gt; version &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;1.2.4&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

repositories &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  mavenCentral&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
  jcenter&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

dependencies &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  compile &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;org.codehaus.groovy:groovy-all:2.3.4&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

gretty &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// &amp;#39;jetty7&amp;#39;, &amp;#39;jetty8&amp;#39;, &amp;#39;jetty9&amp;#39;, &amp;#39;tomcat7&amp;#39;, &amp;#39;tomcat8&amp;#39;&lt;/span&gt;
  servletContainer &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;tomcat7&amp;#39;&lt;/span&gt;
  httpPort &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;9091&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Creo que nos servirá bien un rato para las cosas que tenemos que hcaer, por que incluso soporta SpringBoot.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>